{
  "address": "0x915C7C9c7A336c3aA96185B53D0B447188f3397E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fairValue",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_currencyValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fairValue",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_exitFee",
          "type": "uint256"
        }
      ],
      "name": "Close",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_currencyValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fairValue",
          "type": "uint256"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_currencyValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fairValue",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_previousState",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newState",
          "type": "uint256"
        }
      ],
      "name": "StateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_whitelistAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_control",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_autoBurn",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_revenueCommitmentBasisPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeBasisPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minInvestment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_openUntilAtLeast",
          "type": "uint256"
        }
      ],
      "name": "UpdateConfig",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "autoBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "burnedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_currencyValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensBought",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buySlopeDen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buySlopeNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buybackReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "close",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "control",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "currency",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currencyValue",
          "type": "uint256"
        }
      ],
      "name": "estimateBuyValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_msgValue",
          "type": "uint256"
        }
      ],
      "name": "estimateExitFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currencyValue",
          "type": "uint256"
        }
      ],
      "name": "estimatePayValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantityToSell",
          "type": "uint256"
        }
      ],
      "name": "estimateSellValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initGoal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initInvestors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initReserve",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_currencyAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initGoal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buySlopeNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buySlopeDen",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_investmentReserveBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "investmentReserveBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openUntilAtLeast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_currencyValue",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "revenueCommitmentBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantityToSell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCurrencyReturned",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelistAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_control",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_autoBurn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_revenueCommitmentBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openUntilAtLeast",
          "type": "uint256"
        }
      ],
      "name": "updateConfig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "contract IWhitelist",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3bc524dd9f2b866c6530c9523c66fee90525cafcd05b2ede782a2434c0b555fb",
  "receipt": {
    "to": null,
    "from": "0x84EEb305dA0A4309a696d43DE9f79f04e66EB4f8",
    "contractAddress": "0x915C7C9c7A336c3aA96185B53D0B447188f3397E",
    "transactionIndex": 0,
    "gasUsed": "3530419",
    "logsBloom": "0x
    "blockHash": "0x6188894c72d4c2685ed9b2460f66d8aa568f055f0d3a66d8a463996edb03319f",
    "transactionHash": "0x3bc524dd9f2b866c6530c9523c66fee90525cafcd05b2ede782a2434c0b555fb",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3530419",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fbc9bb57ae8f74e5c2f9692a013a8378",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fairValue\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fairValue\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exitFee\",\"type\":\"uint256\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fairValue\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fairValue\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousState\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newState\",\"type\":\"uint256\"}],\"name\":\"StateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_whitelistAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_control\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_autoBurn\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_revenueCommitmentBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_openUntilAtLeast\",\"type\":\"uint256\"}],\"name\":\"UpdateConfig\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensBought\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buySlopeDen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buySlopeNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buybackReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"control\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"}],\"name\":\"estimateBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_msgValue\",\"type\":\"uint256\"}],\"name\":\"estimateExitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"}],\"name\":\"estimatePayValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantityToSell\",\"type\":\"uint256\"}],\"name\":\"estimateSellValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initReserve\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buySlopeNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buySlopeDen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investmentReserveBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentReserveBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openUntilAtLeast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revenueCommitmentBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantityToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCurrencyReturned\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_control\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoBurn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_revenueCommitmentBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openUntilAtLeast\",\"type\":\"uint256\"}],\"name\":\"updateConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Note that this is not the same as a `sell` via the DAT.\"},\"buy(address,uint256,uint256)\":{\"details\":\"_minTokensBought is necessary as the price will change if some elses transaction mines after yours was submitted.\",\"params\":{\"_currencyValue\":\"How much currency to spend in order to buy COT.\",\"_minTokensBought\":\"Buy at least this many COT tokens or the transaction reverts.\",\"_to\":\"The account to receive the COT tokens from this purchase.\"}},\"close()\":{\"details\":\"Requires an `exitFee` to be paid.  If the currency is ETH, include a little more than what appears to be required and any remainder will be returned to your account.  This is because another user may have a transaction mined which changes the exitFee required. For other `currency` types, the beneficiary account will be billed the exact amount required.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"estimateBuyValue(uint256)\":{\"params\":{\"_currencyValue\":\"How much currency to spend in order to buy COT.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address.\"},\"initialize(string,string,uint8)\":{\"details\":\"Sets the values for `name`, `symbol`, and `decimals`. All three of these values are immutable: they can only be set once during construction.\"},\"initialize(uint256,address,uint256,uint256,uint256,uint256,string,string)\":{\"details\":\"using the init pattern in order to support zos upgrades\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pay(address,uint256)\":{\"details\":\"Pay the organization on-chain.\",\"params\":{\"_currencyValue\":\"How much currency which was paid.\",\"_to\":\"The account which receives tokens for the contribution. If this address is not authorized to receive tokens then they will be sent to the beneficiary account instead.\"}},\"sell(address,uint256,uint256)\":{\"details\":\"_minCurrencyReturned is necessary as the price will change if some elses transaction mines after yours was submitted.\",\"params\":{\"_minCurrencyReturned\":\"Get at least this many currency tokens or the transaction reverts.\",\"_quantityToSell\":\"How many COT tokens to sell for currency value.\",\"_to\":\"The account to receive the currency from this sale.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"}},\"title\":\"Decentralized Autonomous Trust This contract is a modified version of the implementation provided by Fairmint for a Decentralized Autonomous Trust as described in the continuous organization whitepaper (https://github.com/c-org/whitepaper) and specified here: https://github.com/fairmint/c-org/wiki. Code from : https://github.com/Fairmint/c-org/blob/dfd3129f9bce8717406aba54d1f1888d8e253dbb/contracts/DecentralizedAutonomousTrust.sol Changes Added: https://github.com/Fairmint/c-org/commit/60bb63b9112a82996f275a75a87c28b1d73e3f11 * Use at your own risk. \"},\"userdoc\":{\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn the amount of tokens from the address msg.sender if authorized.\"},\"buy(address,uint256,uint256)\":{\"notice\":\"Purchase COT tokens with the given amount of currency.\"},\"buybackReserve()\":{\"notice\":\"The total amount of currency value currently locked in the contract and available to sellers.\"},\"close()\":{\"notice\":\"Called by the beneficiary account to STATE_CLOSE or STATE_CANCEL the c-org, preventing any more tokens from being minted.\"},\"estimateBuyValue(uint256)\":{\"notice\":\"Calculate how many COT tokens you would buy with the given amount of currency if `buy` was called now.\"},\"estimateExitFee(uint256)\":{\"notice\":\"Close\"},\"estimatePayValue(uint256)\":{\"notice\":\"Pay\"},\"estimateSellValue(uint256)\":{\"notice\":\"Sell\"},\"initialize(uint256,address,uint256,uint256,uint256,uint256,string,string)\":{\"notice\":\"Called once after deploy to set the initial configuration. None of the values provided here may change once initially set.\"},\"sell(address,uint256,uint256)\":{\"notice\":\"Sell COT tokens for at least the given amount of currency.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/dxd/DecentralizedAutonomousTrust.sol\":\"DecentralizedAutonomousTrust\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x3491510fa4862af1a43f6c860d9cf7392240196540cd3c0eea79d374d419c5a1\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Initializable, Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x2a474399663812668bb8e9c9e7d011d54fd09de386bd6e9fcb2407a677ebd1aa\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is Initializable, IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x704e0cb521f0b571096a72266a34d9a2a59a89853b5b271bc97fa307a4cc4dcc\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/dxd/DecentralizedAutonomousTrust.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\nimport \\\"./interfaces/IWhitelist.sol\\\";\\nimport \\\"./math/BigDiv.sol\\\";\\nimport \\\"./math/Sqrt.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\\";\\n\\n\\n/**\\n * @title Decentralized Autonomous Trust\\n * This contract is a modified version of the implementation provided by Fairmint for a\\n * Decentralized Autonomous Trust as described in the continuous\\n * organization whitepaper (https://github.com/c-org/whitepaper) and\\n * specified here: https://github.com/fairmint/c-org/wiki.\\n * Code from : https://github.com/Fairmint/c-org/blob/dfd3129f9bce8717406aba54d1f1888d8e253dbb/contracts/DecentralizedAutonomousTrust.sol\\n * Changes Added: https://github.com/Fairmint/c-org/commit/60bb63b9112a82996f275a75a87c28b1d73e3f11\\n *\\n * Use at your own risk. \\n */\\ncontract DecentralizedAutonomousTrust\\n  is ERC20, ERC20Detailed\\n{\\n  using SafeMath for uint;\\n  using Sqrt for uint;\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * Events\\n   */\\n\\n  event Buy(\\n    address indexed _from,\\n    address indexed _to,\\n    uint _currencyValue,\\n    uint _fairValue\\n  );\\n  event Sell(\\n    address indexed _from,\\n    address indexed _to,\\n    uint _currencyValue,\\n    uint _fairValue\\n  );\\n  event Burn(\\n    address indexed _from,\\n    uint _fairValue\\n  );\\n  event Pay(\\n    address indexed _from,\\n    address indexed _to,\\n    uint _currencyValue,\\n    uint _fairValue\\n  );\\n  event Close(\\n    uint _exitFee\\n  );\\n  event StateChange(\\n    uint _previousState,\\n    uint _newState\\n  );\\n  event UpdateConfig(\\n    address _whitelistAddress,\\n    address indexed _beneficiary,\\n    address indexed _control,\\n    address indexed _feeCollector,\\n    bool _autoBurn,\\n    uint _revenueCommitmentBasisPoints,\\n    uint _feeBasisPoints,\\n    uint _minInvestment,\\n    uint _openUntilAtLeast\\n  );\\n\\n  /**\\n   * Constants\\n   */\\n\\n  /// @notice The default state\\n  uint private constant STATE_INIT = 0;\\n\\n  /// @notice The state after initGoal has been reached\\n  uint private constant STATE_RUN = 1;\\n\\n  /// @notice The state after closed by the `beneficiary` account from STATE_RUN\\n  uint private constant STATE_CLOSE = 2;\\n\\n  /// @notice The state after closed by the `beneficiary` account from STATE_INIT\\n  uint private constant STATE_CANCEL = 3;\\n\\n  /// @notice When multiplying 2 terms, the max value is 2^128-1\\n  uint private constant MAX_BEFORE_SQUARE = 2**128 - 1;\\n\\n  /// @notice The denominator component for values specified in basis points.\\n  uint private constant BASIS_POINTS_DEN = 10000;\\n\\n  /// @notice The max `totalSupply() + burnedSupply`\\n  /// @dev This limit ensures that the DAT's formulas do not overflow (<MAX_BEFORE_SQUARE/2)\\n  uint private constant MAX_SUPPLY = 10 ** 38;\\n\\n  /**\\n   * Data specific to our token business logic\\n   */\\n\\n  /// @notice The contract for transfer authorizations, if any.\\n  IWhitelist public whitelist;\\n\\n  /// @notice The total number of burned COT tokens, excluding tokens burned from a `Sell` action in the DAT.\\n  uint public burnedSupply;\\n\\n  /**\\n   * Data for DAT business logic\\n   */\\n\\n  /// @notice Set if the COTs minted by the organization when it commits its revenues are\\n  /// automatically burnt (`true`) or not (`false`). Defaults to `false` meaning that there\\n  /// is no automatic burn.\\n  bool public autoBurn;\\n\\n  /// @notice The address of the beneficiary organization which receives the investments.\\n  /// Points to the wallet of the organization.\\n  address payable public beneficiary;\\n\\n  /// @notice The buy slope of the bonding curve.\\n  /// Does not affect the financial model, only the granularity of COT.\\n  /// @dev This is the numerator component of the fractional value.\\n  uint public buySlopeNum;\\n\\n  /// @notice The buy slope of the bonding curve.\\n  /// Does not affect the financial model, only the granularity of COT.\\n  /// @dev This is the denominator component of the fractional value.\\n  uint public buySlopeDen;\\n\\n  /// @notice The address from which the updatable variables can be updated\\n  address public control;\\n\\n  /// @notice The address of the token used as reserve in the bonding curve\\n  /// (e.g. the DAI contract). Use ETH if 0.\\n  IERC20 public currency;\\n\\n  /// @notice The address where fees are sent.\\n  address payable public feeCollector;\\n\\n  /// @notice The percent fee collected each time new COT are issued expressed in basis points.\\n  uint public feeBasisPoints;\\n\\n  /// @notice The initial fundraising goal (expressed in COT) to start the c-org.\\n  /// `0` means that there is no initial fundraising and the c-org immediately moves to run state.\\n  uint public initGoal;\\n\\n  /// @notice A map with all investors in init state using address as a key and amount as value.\\n  /// @dev This structure's purpose is to make sure that only investors can withdraw their money if init_goal is not reached.\\n  mapping(address => uint) public initInvestors;\\n\\n  /// @notice The initial number of COT created at initialization for the beneficiary.\\n  /// Technically however, this variable is not a constant as we must always have\\n  ///`init_reserve>=total_supply+burnt_supply` which means that `init_reserve` will be automatically\\n  /// decreased to equal `total_supply+burnt_supply` in case `init_reserve>total_supply+burnt_supply`\\n  /// after an investor sells his COTs.\\n  /// @dev Organizations may move these tokens into vesting contract(s)\\n  uint public initReserve;\\n\\n  /// @notice The investment reserve of the c-org. Defines the percentage of the value invested that is\\n  /// automatically funneled and held into the buyback_reserve expressed in basis points.\\n  uint public investmentReserveBasisPoints;\\n\\n  /// @notice The earliest date/time (in seconds) that the DAT may enter the `CLOSE` state, ensuring\\n  /// that if the DAT reaches the `RUN` state it will remain running for at least this period of time.\\n  /// @dev This value may be increased anytime by the control account\\n  uint public openUntilAtLeast;\\n\\n  /// @notice The minimum amount of `currency` investment accepted.\\n  uint public minInvestment;\\n\\n  /// @notice The revenue commitment of the organization. Defines the percentage of the value paid through the contract\\n  /// that is automatically funneled and held into the buyback_reserve expressed in basis points.\\n  uint public revenueCommitmentBasisPoints;\\n\\n  /// @notice The current state of the contract.\\n  /// @dev See the constants above for possible state values.\\n  uint public state;\\n\\n  string public constant version = \\\"2\\\";\\n  // --- EIP712 niceties ---\\n  // Original source: https://etherscan.io/address/0x6b175474e89094c44da98b954eedeac495271d0f#code\\n  mapping (address => uint) public nonces;\\n  bytes32 public DOMAIN_SEPARATOR;\\n  // bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n  modifier authorizeTransfer(\\n    address _from,\\n    address _to,\\n    uint _value,\\n    bool _isSell\\n  )\\n  {\\n    if(address(whitelist) != address(0))\\n    {\\n      // This is not set for the minting of initialReserve\\n      whitelist.authorizeTransfer(_from, _to, _value, _isSell);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * Buyback reserve\\n   */\\n\\n  /// @notice The total amount of currency value currently locked in the contract and available to sellers.\\n  function buybackReserve() public view returns (uint)\\n  {\\n    uint reserve = address(this).balance;\\n    if(address(currency) != address(0))\\n    {\\n      reserve = currency.balanceOf(address(this));\\n    }\\n\\n    if(reserve > MAX_BEFORE_SQUARE)\\n    {\\n      /// Math: If the reserve becomes excessive, cap the value to prevent overflowing in other formulas\\n      return MAX_BEFORE_SQUARE;\\n    }\\n\\n    return reserve;\\n  }\\n\\n  /**\\n   * Functions required for the whitelist\\n   */\\n\\n  function _detectTransferRestriction(\\n    address _from,\\n    address _to,\\n    uint _value\\n  ) private view\\n    returns (uint)\\n  {\\n    if(address(whitelist) != address(0))\\n    {\\n      // This is not set for the minting of initialReserve\\n      return whitelist.detectTransferRestriction(_from, _to, _value);\\n    }\\n\\n    return 0;\\n  }\\n\\n  /**\\n   * Functions required by the ERC-20 token standard\\n   */\\n\\n  /// @dev Moves tokens from one account to another if authorized.\\n  function _transfer(\\n    address _from,\\n    address _to,\\n    uint _amount\\n  ) internal\\n    authorizeTransfer(_from, _to, _amount, false)\\n  {\\n    require(state != STATE_INIT || _from == beneficiary, \\\"ONLY_BENEFICIARY_DURING_INIT\\\");\\n    super._transfer(_from, _to, _amount);\\n  }\\n\\n  /// @dev Removes tokens from the circulating supply.\\n  function _burn(\\n    address _from,\\n    uint _amount,\\n    bool _isSell\\n  ) internal\\n    authorizeTransfer(_from, address(0), _amount, _isSell)\\n  {\\n    super._burn(_from, _amount);\\n\\n    if(!_isSell)\\n    {\\n      // This is a burn\\n      require(state == STATE_RUN, \\\"ONLY_DURING_RUN\\\");\\n      // SafeMath not required as we cap how high this value may get during mint\\n      burnedSupply += _amount;\\n      emit Burn(_from, _amount);\\n    }\\n  }\\n\\n  /// @notice Called to mint tokens on `buy`.\\n  function _mint(\\n    address _to,\\n    uint _quantity\\n  ) internal\\n    authorizeTransfer(address(0), _to, _quantity, false)\\n  {\\n    super._mint(_to, _quantity);\\n\\n    // Math: If this value got too large, the DAT may overflow on sell\\n    require(totalSupply().add(burnedSupply) <= MAX_SUPPLY, \\\"EXCESSIVE_SUPPLY\\\");\\n  }\\n\\n  /**\\n   * Transaction Helpers\\n   */\\n\\n  /// @notice Confirms the transfer of `_quantityToInvest` currency to the contract.\\n  function _collectInvestment(\\n    uint _quantityToInvest,\\n    uint _msgValue,\\n    bool _refundRemainder\\n  ) private\\n  {\\n    if(address(currency) == address(0))\\n    {\\n      // currency is ETH\\n      if(_refundRemainder)\\n      {\\n        // Math: if _msgValue was not sufficient then revert\\n        uint refund = _msgValue.sub(_quantityToInvest);\\n        if(refund > 0)\\n        {\\n          Address.sendValue(msg.sender, refund);\\n        }\\n      }\\n      else\\n      {\\n        require(_quantityToInvest == _msgValue, \\\"INCORRECT_MSG_VALUE\\\");\\n      }\\n    }\\n    else\\n    {\\n      // currency is ERC20\\n      require(_msgValue == 0, \\\"DO_NOT_SEND_ETH\\\");\\n\\n      currency.safeTransferFrom(msg.sender, address(this), _quantityToInvest);\\n    }\\n  }\\n\\n  /// @dev Send `_amount` currency from the contract to the `_to` account.\\n  function _transferCurrency(\\n    address payable _to,\\n    uint _amount\\n  ) private\\n  {\\n    if(_amount > 0)\\n    {\\n      if(address(currency) == address(0))\\n      {\\n        Address.sendValue(_to, _amount);\\n      }\\n      else\\n      {\\n        currency.safeTransfer(_to, _amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Config / Control\\n   */\\n\\n  /// @notice Called once after deploy to set the initial configuration.\\n  /// None of the values provided here may change once initially set.\\n  /// @dev using the init pattern in order to support zos upgrades\\n  function initialize(\\n    uint _initReserve,\\n    address _currencyAddress,\\n    uint _initGoal,\\n    uint _buySlopeNum,\\n    uint _buySlopeDen,\\n    uint _investmentReserveBasisPoints,\\n    string memory _name,\\n    string memory _symbol\\n  ) public\\n  {\\n    require(control == address(0), \\\"ALREADY_INITIALIZED\\\");\\n\\n    ERC20Detailed.initialize(_name, _symbol, 18);\\n\\n    // Set initGoal, which in turn defines the initial state\\n    if(_initGoal == 0)\\n    {\\n      emit StateChange(state, STATE_RUN);\\n      state = STATE_RUN;\\n    }\\n    else\\n    {\\n      // Math: If this value got too large, the DAT would overflow on sell\\n      require(_initGoal < MAX_SUPPLY, \\\"EXCESSIVE_GOAL\\\");\\n      initGoal = _initGoal;\\n    }\\n\\n    require(_buySlopeNum > 0, \\\"INVALID_SLOPE_NUM\\\");\\n    require(_buySlopeDen > 0, \\\"INVALID_SLOPE_DEN\\\");\\n    require(_buySlopeNum < MAX_BEFORE_SQUARE, \\\"EXCESSIVE_SLOPE_NUM\\\");\\n    require(_buySlopeDen < MAX_BEFORE_SQUARE, \\\"EXCESSIVE_SLOPE_DEN\\\");\\n    buySlopeNum = _buySlopeNum;\\n    buySlopeDen = _buySlopeDen;\\n    // 100% or less\\n    require(_investmentReserveBasisPoints <= BASIS_POINTS_DEN, \\\"INVALID_RESERVE\\\");\\n    investmentReserveBasisPoints = _investmentReserveBasisPoints;\\n\\n    // Set default values (which may be updated using `updateConfig`)\\n    minInvestment = 100 ether;\\n    beneficiary = msg.sender;\\n    control = msg.sender;\\n    feeCollector = msg.sender;\\n\\n    // Save currency\\n    currency = IERC20(_currencyAddress);\\n\\n    // Mint the initial reserve\\n    if(_initReserve > 0)\\n    {\\n      initReserve = _initReserve;\\n      _mint(beneficiary, initReserve);\\n    }\\n\\n    // Initialize permit\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(bytes(name())),\\n        keccak256(bytes(version)),\\n        getChainId(),\\n        address(this)\\n      )\\n    );\\n  }\\n  function getChainId(\\n  ) private pure\\n    returns (uint id)\\n  {\\n    // solium-disable-next-line\\n    assembly\\n    {\\n      id := chainid()\\n    }\\n  }\\n\\n  function updateConfig(\\n    address _whitelistAddress,\\n    address payable _beneficiary,\\n    address _control,\\n    address payable _feeCollector,\\n    uint _feeBasisPoints,\\n    bool _autoBurn,\\n    uint _revenueCommitmentBasisPoints,\\n    uint _minInvestment,\\n    uint _openUntilAtLeast\\n  ) public\\n  {\\n    // This require(also confirms that initialize has been called.\\n    require(msg.sender == control, \\\"CONTROL_ONLY\\\");\\n\\n    // address(0) is okay\\n    whitelist = IWhitelist(_whitelistAddress);\\n\\n    require(_control != address(0), \\\"INVALID_ADDRESS\\\");\\n    control = _control;\\n\\n    require(_feeCollector != address(0), \\\"INVALID_ADDRESS\\\");\\n    feeCollector = _feeCollector;\\n\\n    autoBurn = _autoBurn;\\n\\n    require(_revenueCommitmentBasisPoints <= BASIS_POINTS_DEN, \\\"INVALID_COMMITMENT\\\");\\n    require(_revenueCommitmentBasisPoints >= revenueCommitmentBasisPoints, \\\"COMMITMENT_MAY_NOT_BE_REDUCED\\\");\\n    revenueCommitmentBasisPoints = _revenueCommitmentBasisPoints;\\n\\n    require(_feeBasisPoints <= BASIS_POINTS_DEN, \\\"INVALID_FEE\\\");\\n    feeBasisPoints = _feeBasisPoints;\\n\\n    require(_minInvestment > 0, \\\"INVALID_MIN_INVESTMENT\\\");\\n    minInvestment = _minInvestment;\\n\\n    require(_openUntilAtLeast >= openUntilAtLeast, \\\"OPEN_UNTIL_MAY_NOT_BE_REDUCED\\\");\\n    openUntilAtLeast = _openUntilAtLeast;\\n\\n    if(beneficiary != _beneficiary)\\n    {\\n      require(_beneficiary != address(0), \\\"INVALID_ADDRESS\\\");\\n      uint tokens = balanceOf(beneficiary);\\n      initInvestors[_beneficiary] = initInvestors[_beneficiary].add(initInvestors[beneficiary]);\\n      initInvestors[beneficiary] = 0;\\n      if(tokens > 0)\\n      {\\n        _transfer(beneficiary, _beneficiary, tokens);\\n      }\\n      beneficiary = _beneficiary;\\n    }\\n\\n    emit UpdateConfig(\\n      _whitelistAddress,\\n      _beneficiary,\\n      _control,\\n      _feeCollector,\\n      _autoBurn,\\n      _revenueCommitmentBasisPoints,\\n      _feeBasisPoints,\\n      _minInvestment,\\n      _openUntilAtLeast\\n    );\\n  }\\n\\n  /**\\n   * Functions for our business logic\\n   */\\n\\n  /// @notice Burn the amount of tokens from the address msg.sender if authorized.\\n  /// @dev Note that this is not the same as a `sell` via the DAT.\\n  function burn(\\n    uint _amount\\n  ) public\\n  {\\n    _burn(msg.sender, _amount, false);\\n  }\\n\\n  // Buy\\n\\n  /// @dev Distributes _value currency between the buybackReserve, beneficiary, and feeCollector.\\n  function _distributeInvestment(\\n    uint _value\\n  ) private\\n  {\\n    // Rounding favors buybackReserve, then beneficiary, and feeCollector is last priority.\\n\\n    // Math: if investment value is < (2^256 - 1) / 10000 this will never overflow.\\n    // Except maybe with a huge single investment, but they can try again with multiple smaller investments.\\n    uint reserve = investmentReserveBasisPoints.mul(_value);\\n    reserve /= BASIS_POINTS_DEN;\\n    reserve = _value.sub(reserve);\\n    uint fee = reserve.mul(feeBasisPoints);\\n    fee /= BASIS_POINTS_DEN;\\n\\n    // Math: since feeBasisPoints is <= BASIS_POINTS_DEN, this will never underflow.\\n    _transferCurrency(beneficiary, reserve - fee);\\n    _transferCurrency(feeCollector, fee);\\n  }\\n\\n  /// @notice Calculate how many COT tokens you would buy with the given amount of currency if `buy` was called now.\\n  /// @param _currencyValue How much currency to spend in order to buy COT.\\n  function estimateBuyValue(\\n    uint _currencyValue\\n  ) public view\\n    returns (uint)\\n  {\\n    if(_currencyValue < minInvestment)\\n    {\\n      return 0;\\n    }\\n\\n    /// Calculate the tokenValue for this investment\\n    uint tokenValue;\\n    if(state == STATE_INIT)\\n    {\\n      uint currencyValue = _currencyValue;\\n      uint _totalSupply = totalSupply();\\n      // (buy_slope*init_goal)*(init_goal+init_reserve-total_supply)/2\\n      // n/d: buy_slope (MAX_BEFORE_SQUARE / MAX_BEFORE_SQUARE)\\n      // g: init_goal (MAX_BEFORE_SQUARE/2)\\n      // t: total_supply (MAX_BEFORE_SQUARE/2)\\n      // r: init_reserve (MAX_BEFORE_SQUARE/2)\\n      // source: ((n/d)*g)*(g+r-t)/2\\n      // impl: (g n (g + r - t))/(2 d)\\n      uint max = BigDiv.bigDiv2x1(\\n        initGoal * buySlopeNum,\\n        initGoal + initReserve - _totalSupply,\\n        2 * buySlopeDen\\n      );\\n      if(currencyValue > max)\\n      {\\n        currencyValue = max;\\n      }\\n      // Math: worst case\\n      // MAX * 2 * MAX_BEFORE_SQUARE\\n      // / MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE\\n      tokenValue = BigDiv.bigDiv2x1(\\n        currencyValue,\\n        2 * buySlopeDen,\\n        initGoal * buySlopeNum\\n      );\\n\\n      if(currencyValue != _currencyValue)\\n      {\\n        currencyValue = _currencyValue - max;\\n        // ((2*next_amount/buy_slope)+init_goal^2)^(1/2)-init_goal\\n        // a: next_amount | currencyValue\\n        // n/d: buy_slope (MAX_BEFORE_SQUARE / MAX_BEFORE_SQUARE)\\n        // g: init_goal (MAX_BEFORE_SQUARE/2)\\n        // r: init_reserve (MAX_BEFORE_SQUARE/2)\\n        // sqrt(((2*a/(n/d))+g^2)-g\\n        // sqrt((2 d a + n g^2)/n) - g\\n\\n        // currencyValue == 2 d a\\n        uint temp = 2 * buySlopeDen;\\n        currencyValue = temp.mul(currencyValue);\\n\\n        // temp == g^2\\n        temp = initGoal;\\n        temp *= temp;\\n\\n        // temp == n g^2\\n        temp = temp.mul(buySlopeNum);\\n\\n        // temp == (2 d a) + n g^2\\n        temp = currencyValue.add(temp);\\n\\n        // temp == (2 d a + n g^2)/n\\n        temp /= buySlopeNum;\\n\\n        // temp == sqrt((2 d a + n g^2)/n)\\n        temp = temp.sqrt();\\n\\n        // temp == sqrt((2 d a + n g^2)/n) - g\\n        temp -= initGoal;\\n\\n        tokenValue = tokenValue.add(temp);\\n      }\\n    }\\n    else if(state == STATE_RUN)\\n    {\\n      // initReserve is reduced on sell as necessary to ensure that this line will not overflow\\n      uint supply = totalSupply() + burnedSupply - initReserve;\\n      // Math: worst case\\n      // MAX * 2 * MAX_BEFORE_SQUARE\\n      // / MAX_BEFORE_SQUARE\\n      tokenValue = BigDiv.bigDiv2x1(\\n        _currencyValue,\\n        2 * buySlopeDen,\\n        buySlopeNum\\n      );\\n\\n      // Math: worst case MAX + (MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE)\\n      tokenValue = tokenValue.add(supply * supply);\\n      tokenValue = tokenValue.sqrt();\\n\\n      // Math: small chance of underflow due to possible rounding in sqrt\\n      tokenValue = tokenValue.sub(supply);\\n    }\\n    else\\n    {\\n      // invalid state\\n      return 0;\\n    }\\n\\n    return tokenValue;\\n  }\\n\\n  /// @notice Purchase COT tokens with the given amount of currency.\\n  /// @param _to The account to receive the COT tokens from this purchase.\\n  /// @param _currencyValue How much currency to spend in order to buy COT.\\n  /// @param _minTokensBought Buy at least this many COT tokens or the transaction reverts.\\n  /// @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\\n  /// yours was submitted.\\n  function buy(\\n    address _to,\\n    uint _currencyValue,\\n    uint _minTokensBought\\n  ) public payable\\n  {\\n    require(_to != address(0), \\\"INVALID_ADDRESS\\\");\\n    require(_minTokensBought > 0, \\\"MUST_BUY_AT_LEAST_1\\\");\\n\\n    // Calculate the tokenValue for this investment\\n    uint tokenValue = estimateBuyValue(_currencyValue);\\n    require(tokenValue >= _minTokensBought, \\\"PRICE_SLIPPAGE\\\");\\n\\n    emit Buy(msg.sender, _to, _currencyValue, tokenValue);\\n\\n    _collectInvestment(_currencyValue, msg.value, false);\\n\\n    // Update state, initInvestors, and distribute the investment when appropriate\\n    if(state == STATE_INIT)\\n    {\\n      // Math worst case: MAX_BEFORE_SQUARE\\n      initInvestors[_to] += tokenValue;\\n      // Math worst case:\\n      // MAX_BEFORE_SQUARE + MAX_BEFORE_SQUARE\\n      if(totalSupply() + tokenValue - initReserve >= initGoal)\\n      {\\n        emit StateChange(state, STATE_RUN);\\n        state = STATE_RUN;\\n        // Math worst case:\\n        // MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE/2\\n        // / MAX_BEFORE_SQUARE * 2\\n        uint beneficiaryContribution = BigDiv.bigDiv2x1(\\n          initInvestors[beneficiary],\\n          buySlopeNum * initGoal,\\n          buySlopeDen * 2\\n        );\\n        _distributeInvestment(buybackReserve().sub(beneficiaryContribution));\\n      }\\n    }\\n    else // implied: if(state == STATE_RUN)\\n    {\\n      if(_to != beneficiary)\\n      {\\n        _distributeInvestment(_currencyValue);\\n      }\\n    }\\n\\n    _mint(_to, tokenValue);\\n\\n    if(state == STATE_RUN && msg.sender == beneficiary && _to == beneficiary && autoBurn)\\n    {\\n      // must mint before this call\\n      _burn(beneficiary, tokenValue, false);\\n    }\\n  }\\n\\n  /// Sell\\n\\n  function estimateSellValue(\\n    uint _quantityToSell\\n  ) public view\\n    returns(uint)\\n  {\\n    uint reserve = buybackReserve();\\n\\n    // Calculate currencyValue for this sale\\n    uint currencyValue;\\n    if(state == STATE_RUN)\\n    {\\n      uint supply = totalSupply() + burnedSupply;\\n\\n      // buyback_reserve = r\\n      // total_supply = t\\n      // burnt_supply = b\\n      // amount = a\\n      // source: (t+b)*a*(2*r)/((t+b)^2)-(((2*r)/((t+b)^2)*a^2)/2)+((2*r)/((t+b)^2)*a*b^2)/(2*(t))\\n      // imp: (a b^2 r)/(t (b + t)^2) + (2 a r)/(b + t) - (a^2 r)/(b + t)^2\\n\\n      // Math: burnedSupply is capped in COT such that the square will never overflow\\n      // Math worst case:\\n      // MAX * MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE/2\\n      // / MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE/2\\n      currencyValue = BigDiv.bigDiv2x2(\\n        _quantityToSell.mul(reserve),\\n        burnedSupply * burnedSupply,\\n        totalSupply(), supply * supply\\n      );\\n      // Math: worst case currencyValue is MAX_BEFORE_SQUARE (max reserve, 1 supply)\\n\\n      // Math worst case:\\n      // MAX * 2 * MAX_BEFORE_SQUARE\\n      uint temp = _quantityToSell.mul(2 * reserve);\\n      temp /= supply;\\n      // Math: worst-case temp is MAX_BEFORE_SQUARE (max reserve, 1 supply)\\n\\n      // Math: considering the worst-case for currencyValue and temp, this can never overflow\\n      currencyValue += temp;\\n\\n      // Math: worst case\\n      // MAX * MAX * MAX_BEFORE_SQUARE\\n      // / MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE/2\\n      currencyValue -= BigDiv.bigDiv2x1RoundUp(\\n        _quantityToSell.mul(_quantityToSell),\\n        reserve,\\n        supply * supply\\n      );\\n    }\\n    else if(state == STATE_CLOSE)\\n    {\\n      // Math worst case\\n      // MAX * MAX_BEFORE_SQUARE\\n      currencyValue = _quantityToSell.mul(reserve);\\n      currencyValue /= totalSupply();\\n    }\\n    else\\n    {\\n      // STATE_INIT or STATE_CANCEL\\n      // Math worst case:\\n      // MAX * MAX_BEFORE_SQUARE\\n      currencyValue = _quantityToSell.mul(reserve);\\n      // Math: COT blocks initReserve from being burned unless we reach the RUN state which prevents an underflow\\n      currencyValue /= totalSupply() - initReserve;\\n    }\\n\\n    return currencyValue;\\n  }\\n\\n  /// @notice Sell COT tokens for at least the given amount of currency.\\n  /// @param _to The account to receive the currency from this sale.\\n  /// @param _quantityToSell How many COT tokens to sell for currency value.\\n  /// @param _minCurrencyReturned Get at least this many currency tokens or the transaction reverts.\\n  /// @dev _minCurrencyReturned is necessary as the price will change if some elses transaction mines after\\n  /// yours was submitted.\\n  function sell(\\n    address payable _to,\\n    uint _quantityToSell,\\n    uint _minCurrencyReturned\\n  ) public\\n  {\\n    require(msg.sender != beneficiary || state >= STATE_CLOSE, \\\"BENEFICIARY_ONLY_SELL_IN_CLOSE_OR_CANCEL\\\");\\n    require(_minCurrencyReturned > 0, \\\"MUST_SELL_AT_LEAST_1\\\");\\n\\n    uint currencyValue = estimateSellValue(_quantityToSell);\\n    require(currencyValue >= _minCurrencyReturned, \\\"PRICE_SLIPPAGE\\\");\\n\\n    if(state == STATE_INIT || state == STATE_CANCEL)\\n    {\\n      initInvestors[msg.sender] = initInvestors[msg.sender].sub(_quantityToSell);\\n    }\\n\\n    _burn(msg.sender, _quantityToSell, true);\\n    uint supply = totalSupply() + burnedSupply;\\n    if(supply < initReserve)\\n    {\\n      initReserve = supply;\\n    }\\n\\n    _transferCurrency(_to, currencyValue);\\n    emit Sell(msg.sender, _to, currencyValue, _quantityToSell);\\n  }\\n\\n  /// Pay\\n\\n  function estimatePayValue(\\n    uint _currencyValue\\n  ) public view\\n    returns (uint)\\n  {\\n    // buy_slope = n/d\\n    // revenue_commitment = c/g\\n    // sqrt(\\n    //  (2 a c d)\\n    //  /\\n    //  (g n)\\n    //  + s^2\\n    // ) - s\\n\\n    uint supply = totalSupply() + burnedSupply;\\n\\n    // Math: worst case\\n    // MAX * 2 * 10000 * MAX_BEFORE_SQUARE\\n    // / 10000 * MAX_BEFORE_SQUARE\\n    uint tokenValue = BigDiv.bigDiv2x1(\\n      _currencyValue.mul(2 * revenueCommitmentBasisPoints),\\n      buySlopeDen,\\n      BASIS_POINTS_DEN * buySlopeNum\\n    );\\n\\n    tokenValue = tokenValue.add(supply * supply);\\n    tokenValue = tokenValue.sqrt();\\n\\n    if(tokenValue > supply)\\n    {\\n      tokenValue -= supply;\\n    }\\n    else\\n    {\\n      tokenValue = 0;\\n    }\\n\\n    return tokenValue;\\n  }\\n\\n  /// @dev Pay the organization on-chain.\\n  /// @param _to The account which receives tokens for the contribution.\\n  /// @param _currencyValue How much currency which was paid.\\n  function _pay(\\n    address _to,\\n    uint _currencyValue\\n  ) private\\n  {\\n    require(_currencyValue > 0, \\\"MISSING_CURRENCY\\\");\\n    require(state == STATE_RUN, \\\"INVALID_STATE\\\");\\n\\n    // Send a portion of the funds to the beneficiary, the rest is added to the buybackReserve\\n    // Math: if _currencyValue is < (2^256 - 1) / 10000 this will not overflow\\n    uint reserve = _currencyValue.mul(investmentReserveBasisPoints);\\n    reserve /= BASIS_POINTS_DEN;\\n\\n    uint tokenValue = estimatePayValue(_currencyValue);\\n\\n    // Update the to address to the beneficiary if the currency value would fail\\n    address to = _to;\\n    if(to == address(0))\\n    {\\n      to = beneficiary;\\n    }\\n    else if(_detectTransferRestriction(address(0), _to, tokenValue) != 0)\\n    {\\n      to = beneficiary;\\n    }\\n\\n    // Math: this will never underflow since investmentReserveBasisPoints is capped to BASIS_POINTS_DEN\\n    _transferCurrency(beneficiary, _currencyValue - reserve);\\n\\n    // Distribute tokens\\n    if(tokenValue > 0)\\n    {\\n      _mint(to, tokenValue);\\n      if(to == beneficiary && autoBurn)\\n      {\\n        // must mint before this call\\n        _burn(beneficiary, tokenValue, false);\\n      }\\n    }\\n\\n    emit Pay(msg.sender, _to, _currencyValue, tokenValue);\\n  }\\n\\n  /// @dev Pay the organization on-chain.\\n  /// @param _to The account which receives tokens for the contribution. If this address\\n  /// is not authorized to receive tokens then they will be sent to the beneficiary account instead.\\n  /// @param _currencyValue How much currency which was paid.\\n  function pay(\\n    address _to,\\n    uint _currencyValue\\n  ) public payable\\n  {\\n    _collectInvestment(_currencyValue, msg.value, false);\\n    _pay(_to, _currencyValue);\\n  }\\n\\n  /// @notice Pay the organization on-chain without minting any tokens.\\n  /// @dev This allows you to add funds directly to the buybackReserve.\\n  function () external payable\\n  {\\n    require(address(currency) == address(0), \\\"ONLY_FOR_CURRENCY_ETH\\\");\\n  }\\n  \\n  /// Close\\n\\n  function estimateExitFee(\\n    uint _msgValue\\n  ) public view\\n    returns(uint)\\n  {\\n    uint exitFee;\\n\\n    if(state == STATE_RUN)\\n    {\\n      uint reserve = buybackReserve();\\n      reserve = reserve.sub(_msgValue);\\n\\n      // Source: t*(t+b)*(n/d)-r\\n      // Implementation: (b n t)/d + (n t^2)/d - r\\n\\n      uint _totalSupply = totalSupply();\\n\\n      // Math worst case:\\n      // MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE/2 * MAX_BEFORE_SQUARE\\n      exitFee = BigDiv.bigDiv2x1(\\n        _totalSupply,\\n        burnedSupply * buySlopeNum,\\n        buySlopeDen\\n      );\\n      // Math worst case:\\n      // MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE\\n      exitFee += BigDiv.bigDiv2x1(\\n        _totalSupply,\\n        buySlopeNum * _totalSupply,\\n        buySlopeDen\\n      );\\n      // Math: this if condition avoids a potential overflow\\n      if(exitFee <= reserve)\\n      {\\n        exitFee = 0;\\n      }\\n      else\\n      {\\n        exitFee -= reserve;\\n      }\\n    }\\n\\n    return exitFee;\\n  }\\n\\n  /// @notice Called by the beneficiary account to STATE_CLOSE or STATE_CANCEL the c-org,\\n  /// preventing any more tokens from being minted.\\n  /// @dev Requires an `exitFee` to be paid.  If the currency is ETH, include a little more than\\n  /// what appears to be required and any remainder will be returned to your account.  This is\\n  /// because another user may have a transaction mined which changes the exitFee required.\\n  /// For other `currency` types, the beneficiary account will be billed the exact amount required.\\n  function close() public payable\\n  {\\n    require(msg.sender == beneficiary, \\\"BENEFICIARY_ONLY\\\");\\n\\n    uint exitFee = 0;\\n\\n    if(state == STATE_INIT)\\n    {\\n      // Allow the org to cancel anytime if the initGoal was not reached.\\n      emit StateChange(state, STATE_CANCEL);\\n      state = STATE_CANCEL;\\n    }\\n    else if(state == STATE_RUN)\\n    {\\n      // Collect the exitFee and close the c-org.\\n      require(openUntilAtLeast <= block.timestamp, \\\"TOO_EARLY\\\");\\n\\n      exitFee = estimateExitFee(msg.value);\\n\\n      emit StateChange(state, STATE_CLOSE);\\n      state = STATE_CLOSE;\\n\\n      _collectInvestment(exitFee, msg.value, true);\\n    }\\n    else\\n    {\\n      revert(\\\"INVALID_STATE\\\");\\n    }\\n\\n    emit Close(exitFee);\\n  }\\n\\n  // --- Approve by signature ---\\n  // Original source: https://etherscan.io/address/0x6b175474e89094c44da98b954eedeac495271d0f#code\\n  function permit(\\n    address holder,\\n    address spender,\\n    uint256 nonce,\\n    uint256 expiry,\\n    bool allowed,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external\\n  {\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        \\\"\\\\x19\\\\x01\\\",\\n        DOMAIN_SEPARATOR,\\n        keccak256(\\n          abi.encode(PERMIT_TYPEHASH,\\n                    holder,\\n                    spender,\\n                    nonce,\\n                    expiry,\\n                    allowed\\n          )\\n        )\\n      )\\n    );\\n\\n    require(holder != address(0), \\\"DAT/invalid-address-0\\\");\\n    require(holder == ecrecover(digest, v, r, s), \\\"DAT/invalid-permit\\\");\\n    require(expiry == 0 || now <= expiry, \\\"DAT/permit-expired\\\");\\n    require(nonce == nonces[holder]++, \\\"DAT/invalid-nonce\\\");\\n    uint wad = allowed ? uint(-1) : 0;\\n    _approve(holder, spender, wad);\\n  }\\n}\\n\",\"keccak256\":\"0x8617bc32c24f179788682f22b0610780732962191392adf0e0b24e61fd21c322\"},\"contracts/dxd/interfaces/IWhitelist.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\n\\n/**\\n * Source: https://raw.githubusercontent.com/simple-restricted-token/reference-implementation/master/contracts/token/ERC1404/ERC1404.sol\\n * With ERC-20 APIs removed (will be implemented as a separate contract).\\n * And adding authorizeTransfer.\\n */\\ninterface IWhitelist\\n{\\n  /**\\n   * @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\\n   * @param from Sending address\\n   * @param to Receiving address\\n   * @param value Amount of tokens being transferred\\n   * @return Code by which to reference message for rejection reasoning\\n   * @dev Overwrite with your custom transfer restriction logic\\n   */\\n  function detectTransferRestriction(\\n    address from,\\n    address to,\\n    uint value\\n  ) external view\\n    returns (uint8);\\n\\n  /**\\n   * @notice Returns a human-readable message for a given restriction code\\n   * @param restrictionCode Identifier for looking up a message\\n   * @return Text showing the restriction's reasoning\\n   * @dev Overwrite with your custom message and restrictionCode handling\\n   */\\n  function messageForTransferRestriction(\\n    uint8 restrictionCode\\n  ) external pure\\n    returns (string memory);\\n\\n  /**\\n   * @notice Called by the DAT contract before a transfer occurs.\\n   * @dev This call will revert when the transfer is not authorized.\\n   * This is a mutable call to allow additional data to be recorded,\\n   * such as when the user aquired their tokens.\\n   */\\n  function authorizeTransfer(\\n    address _from,\\n    address _to,\\n    uint _value,\\n    bool _isSell\\n  ) external;\\n}\",\"keccak256\":\"0xab7533ae8531752d092ec2ef2482f0f8f41d9b32057c8b49e36e6359bfc76998\"},\"contracts/dxd/math/BigDiv.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Reduces the size of terms before multiplication, to avoid an overflow, and then\\n * restores the proper size after division.\\n * @notice This effectively allows us to overflow values in the numerator and/or denominator\\n * of a fraction, so long as the end result does not overflow as well.\\n * @dev Results may be off by 1 + 0.000001% for 2x1 calls and 2 + 0.00001% for 2x2 calls.\\n * Do not use if your contract expects very small result values to be accurate.\\n */\\nlibrary BigDiv\\n{\\n  using SafeMath for uint256;\\n\\n  /// @notice The max possible value\\n  uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n  /// @notice When multiplying 2 terms <= this value the result won't overflow\\n  uint256 private constant MAX_BEFORE_SQUARE = 2**128 - 1;\\n\\n  /// @notice The max error target is off by 1 plus up to 0.000001% error\\n  /// for bigDiv2x1 and that `* 2` for bigDiv2x2\\n  uint256 private constant MAX_ERROR = 100000000;\\n\\n  /// @notice A larger error threshold to use when multiple rounding errors may apply\\n  uint256 private constant MAX_ERROR_BEFORE_DIV = MAX_ERROR * 2;\\n\\n  /**\\n   * @notice Returns the approx result of `a * b / d` so long as the result is <= MAX_UINT\\n   * @param _numA the first numerator term\\n   * @param _numB the second numerator term\\n   * @param _den the denominator\\n   * @return the approx result with up to off by 1 + MAX_ERROR, rounding down if needed\\n   */\\n  function bigDiv2x1(\\n    uint256 _numA,\\n    uint256 _numB,\\n    uint256 _den\\n  ) internal pure\\n    returns(uint256)\\n  {\\n    if(_numA == 0 || _numB == 0)\\n    {\\n      // would div by 0 or underflow if we don't special case 0\\n      return 0;\\n    }\\n\\n    uint256 value;\\n\\n    if(MAX_UINT / _numA >= _numB)\\n    {\\n      // a*b does not overflow, return exact math\\n      value = _numA * _numB;\\n      value /= _den;\\n      return value;\\n    }\\n\\n    // Sort numerators\\n    uint256 numMax = _numB;\\n    uint256 numMin = _numA;\\n    if(_numA > _numB)\\n    {\\n      numMax = _numA;\\n      numMin = _numB;\\n    }\\n\\n    value = numMax / _den;\\n    if(value > MAX_ERROR)\\n    {\\n      // _den is small enough to be MAX_ERROR or better w/o a factor\\n      value = value.mul(numMin);\\n      return value;\\n    }\\n\\n    // formula = ((a / f) * b) / (d / f)\\n    // factor >= a / sqrt(MAX) * (b / sqrt(MAX))\\n    uint256 factor = numMin - 1;\\n    factor /= MAX_BEFORE_SQUARE;\\n    factor += 1;\\n    uint256 temp = numMax - 1;\\n    temp /= MAX_BEFORE_SQUARE;\\n    temp += 1;\\n    if(MAX_UINT / factor >= temp)\\n    {\\n      factor *= temp;\\n      value = numMax / factor;\\n      if(value > MAX_ERROR_BEFORE_DIV)\\n      {\\n        value = value.mul(numMin);\\n        temp = _den - 1;\\n        temp /= factor;\\n        temp = temp.add(1);\\n        value /= temp;\\n        return value;\\n      }\\n    }\\n\\n    // formula: (a / (d / f)) * (b / f)\\n    // factor: b / sqrt(MAX)\\n    factor = numMin - 1;\\n    factor /= MAX_BEFORE_SQUARE;\\n    factor += 1;\\n    value = numMin / factor;\\n    temp = _den - 1;\\n    temp /= factor;\\n    temp += 1;\\n    temp = numMax / temp;\\n    value = value.mul(temp);\\n    return value;\\n  }\\n\\n  /**\\n   * @notice Returns the approx result of `a * b / d` so long as the result is <= MAX_UINT\\n   * @param _numA the first numerator term\\n   * @param _numB the second numerator term\\n   * @param _den the denominator\\n   * @return the approx result with up to off by 1 + MAX_ERROR, rounding down if needed\\n   * @dev roundUp is implemented by first rounding down and then adding the max error to the result\\n   */\\n  function bigDiv2x1RoundUp(\\n    uint256 _numA,\\n    uint256 _numB,\\n    uint256 _den\\n  ) internal pure\\n    returns(uint256)\\n  {\\n    // first get the rounded down result\\n    uint256 value = bigDiv2x1(_numA, _numB, _den);\\n\\n    if(value == 0)\\n    {\\n      // when the value rounds down to 0, assume up to an off by 1 error\\n      return 1;\\n    }\\n\\n    // round down has a max error of MAX_ERROR, add that to the result\\n    // for a round up error of <= MAX_ERROR\\n    uint256 temp = value - 1;\\n    temp /= MAX_ERROR;\\n    temp += 1;\\n    if(MAX_UINT - value < temp)\\n    {\\n      // value + error would overflow, return MAX\\n      return MAX_UINT;\\n    }\\n\\n    value += temp;\\n\\n    return value;\\n  }\\n\\n  /**\\n   * @notice Returns the approx result of `a * b / (c * d)` so long as the result is <= MAX_UINT\\n   * @param _numA the first numerator term\\n   * @param _numB the second numerator term\\n   * @param _denA the first denominator term\\n   * @param _denB the second denominator term\\n   * @return the approx result with up to off by 2 + MAX_ERROR*10 error, rounding down if needed\\n   * @dev this uses bigDiv2x1 and adds additional rounding error so the max error of this\\n   * formula is larger\\n   */\\n  function bigDiv2x2(\\n    uint256 _numA,\\n    uint256 _numB,\\n    uint256 _denA,\\n    uint256 _denB\\n  ) internal pure\\n    returns (uint256)\\n  {\\n    if(MAX_UINT / _denA >= _denB)\\n    {\\n      // denA*denB does not overflow, use bigDiv2x1 instead\\n      return bigDiv2x1(_numA, _numB, _denA * _denB);\\n    }\\n\\n    if(_numA == 0 || _numB == 0)\\n    {\\n      // would div by 0 or underflow if we don't special case 0\\n      return 0;\\n    }\\n\\n    // Sort denominators\\n    uint256 denMax = _denB;\\n    uint256 denMin = _denA;\\n    if(_denA > _denB)\\n    {\\n      denMax = _denA;\\n      denMin = _denB;\\n    }\\n\\n    uint256 value;\\n\\n    if(MAX_UINT / _numA >= _numB)\\n    {\\n      // a*b does not overflow, use `a / d / c`\\n      value = _numA * _numB;\\n      value /= denMin;\\n      value /= denMax;\\n      return value;\\n    }\\n\\n    // `ab / cd` where both `ab` and `cd` would overflow\\n\\n    // Sort numerators\\n    uint256 numMax = _numB;\\n    uint256 numMin = _numA;\\n    if(_numA > _numB)\\n    {\\n      numMax = _numA;\\n      numMin = _numB;\\n    }\\n\\n    // formula = (a/d) * b / c\\n    uint256 temp = numMax / denMin;\\n    if(temp > MAX_ERROR_BEFORE_DIV)\\n    {\\n      return bigDiv2x1(temp, numMin, denMax);\\n    }\\n\\n    // formula: ((a/f) * b) / d then either * f / c or / c * f\\n    // factor >= a / sqrt(MAX) * (b / sqrt(MAX))\\n    uint256 factor = numMin - 1;\\n    factor /= MAX_BEFORE_SQUARE;\\n    factor += 1;\\n    temp = numMax - 1;\\n    temp /= MAX_BEFORE_SQUARE;\\n    temp += 1;\\n    if(MAX_UINT / factor >= temp)\\n    {\\n      factor *= temp;\\n\\n      value = numMax / factor;\\n      if(value > MAX_ERROR_BEFORE_DIV)\\n      {\\n        value = value.mul(numMin);\\n        value /= denMin;\\n        if(value > 0 && MAX_UINT / value >= factor)\\n        {\\n          value *= factor;\\n          value /= denMax;\\n          return value;\\n        }\\n      }\\n    }\\n\\n    // formula: (a/f) * b / ((c*d)/f)\\n    // factor >= c / sqrt(MAX) * (d / sqrt(MAX))\\n    factor = denMin;\\n    factor /= MAX_BEFORE_SQUARE;\\n    temp = denMax;\\n    // + 1 here prevents overflow of factor*temp\\n    temp /= MAX_BEFORE_SQUARE + 1;\\n    factor *= temp;\\n    return bigDiv2x1(numMax / factor, numMin, MAX_UINT);\\n  }\\n}\\n\",\"keccak256\":\"0x301b9a19be81433278de1288f48627ec7ec1a4534c2f5f5a3800faa30989e48d\"},\"contracts/dxd/math/Sqrt.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n\\n/**\\n * @title Calculates the square root of a given value.\\n * @dev Results may be off by 1.\\n */\\nlibrary Sqrt\\n{\\n  /// @notice The max possible value\\n  uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n  // Source: https://github.com/ethereum/dapp-bin/pull/50\\n  function sqrt(\\n    uint x\\n  ) internal pure\\n    returns (uint y)\\n  {\\n    if (x == 0)\\n    {\\n      return 0;\\n    }\\n    else if (x <= 3)\\n    {\\n      return 1;\\n    }\\n    else if (x == MAX_UINT)\\n    {\\n      // Without this we fail on x + 1 below\\n      return 2**128 - 1;\\n    }\\n\\n    uint z = (x + 1) / 2;\\n    y = x;\\n    while (z < y)\\n    {\\n      y = z;\\n      z = (x / z + z) / 2;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9965a26c9c9d092eb1abce4ba4a5f4d0651392d78421c2f92624739a5e46404a\"}},\"version\":1}",
  "bytecode": "0x6080604052613ee4806100136000396000f3fe6080604052600436106102885760003560e01c806370a082311161015a578063a71ddd25116100c1578063c415b95c1161007a578063c415b95c14610bfd578063d8de658714610c12578063dcf81d1714610c27578063dd62ed3e14610c3c578063e5a6b10f14610c77578063ff90956014610c8c57610288565b8063a71ddd2514610b2f578063a9059cbb14610b44578063b12f415314610b7d578063b8606eef14610ba7578063c19d93fb14610bbc578063c407687614610bd157610288565b806393e59dc11161011357806393e59dc114610a7057806395d89b4114610a855780639df3f4f614610a9a578063a457c2d714610aaf578063a59ac6dd14610ae8578063a63b91f414610b1a57610288565b806370a0823114610931578063736dcb1f146109645780637ecebe0014610997578063896d1708146109ca5780638ac2c680146109f45780638fcbaf0c14610a0957610288565b80633644e515116101fe5780634f3424df116101b75780634f3424df1461087457806354fd4d501461089e57806355d0a1d0146108b357806358439fa5146108c85780636177e37c146108dd5780636a272462146108f257610288565b80633644e5151461075457806338af3eed14610769578063395093511461079a57806342966c68146107d3578063438f45a3146107fd57806343d726d61461086c57610288565b806323b872dd1161025057806323b872dd1461067d57806326315438146106c05780632e872bb3146106d557806330adf81f146106ff578063313ce5671461071457806335e5cc311461073f57610288565b806306fdde03146102e0578063095ea7b31461036a5780631624f6c6146103b757806318160ddd146104f257806321dfb63314610519575b60a3546001600160a01b0316156102de576040805162461bcd60e51b815260206004820152601560248201527409e9c98b2be8c9ea4be86aaa4a48a9c86b2be8aa89605b1b604482015290519081900360640190fd5b005b3480156102ec57600080fd5b506102f5610ca1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032f578181015183820152602001610317565b50505050905090810190601f16801561035c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037657600080fd5b506103a36004803603604081101561038d57600080fd5b506001600160a01b038135169060200135610d38565b604080519115158252519081900360200190f35b3480156103c357600080fd5b506102de600480360360608110156103da57600080fd5b810190602081018135600160201b8111156103f457600080fd5b82018360208201111561040657600080fd5b803590602001918460018302840111600160201b8311171561042757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561047957600080fd5b82018360208201111561048b57600080fd5b803590602001918460018302840111600160201b831117156104ac57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150610d569050565b3480156104fe57600080fd5b50610507610e32565b60408051918252519081900360200190f35b34801561052557600080fd5b506102de600480360361010081101561053d57600080fd5b8135916001600160a01b036020820135169160408201359160608101359160808201359160a08101359181019060e0810160c0820135600160201b81111561058457600080fd5b82018360208201111561059657600080fd5b803590602001918460018302840111600160201b831117156105b757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561060957600080fd5b82018360208201111561061b57600080fd5b803590602001918460018302840111600160201b8311171561063c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e38945050505050565b34801561068957600080fd5b506103a3600480360360608110156106a057600080fd5b506001600160a01b038135811691602081013590911690604001356111f5565b3480156106cc57600080fd5b50610507611283565b3480156106e157600080fd5b50610507600480360360208110156106f857600080fd5b5035611289565b34801561070b57600080fd5b50610507611406565b34801561072057600080fd5b5061072961142a565b6040805160ff9092168252519081900360200190f35b34801561074b57600080fd5b50610507611433565b34801561076057600080fd5b50610507611439565b34801561077557600080fd5b5061077e61143f565b604080516001600160a01b039092168252519081900360200190f35b3480156107a657600080fd5b506103a3600480360360408110156107bd57600080fd5b506001600160a01b038135169060200135611453565b3480156107df57600080fd5b506102de600480360360208110156107f657600080fd5b50356114a7565b34801561080957600080fd5b506102de600480360361012081101561082157600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a081013515159060c08101359060e08101359061010001356114b6565b6102de611941565b34801561088057600080fd5b506105076004803603602081101561089757600080fd5b5035611ae4565b3480156108aa57600080fd5b506102f5611b5c565b3480156108bf57600080fd5b50610507611b79565b3480156108d457600080fd5b50610507611b7f565b3480156108e957600080fd5b50610507611b85565b3480156108fe57600080fd5b506102de6004803603606081101561091557600080fd5b506001600160a01b038135169060208101359060400135611b8b565b34801561093d57600080fd5b506105076004803603602081101561095457600080fd5b50356001600160a01b0316611d53565b34801561097057600080fd5b506105076004803603602081101561098757600080fd5b50356001600160a01b0316611d6e565b3480156109a357600080fd5b50610507600480360360208110156109ba57600080fd5b50356001600160a01b0316611d80565b3480156109d657600080fd5b50610507600480360360208110156109ed57600080fd5b5035611d92565b348015610a0057600080fd5b50610507611e13565b348015610a1557600080fd5b506102de6004803603610100811015610a2d57600080fd5b506001600160a01b038135811691602081013590911690604081013590606081013590608081013515159060ff60a0820135169060c08101359060e00135611e19565b348015610a7c57600080fd5b5061077e6120ba565b348015610a9157600080fd5b506102f56120c9565b348015610aa657600080fd5b5061050761212a565b348015610abb57600080fd5b506103a360048036036040811015610ad257600080fd5b506001600160a01b038135169060200135612130565b6102de60048036036060811015610afe57600080fd5b506001600160a01b03813516906020810135906040013561219e565b348015610b2657600080fd5b506103a3612448565b348015610b3b57600080fd5b50610507612451565b348015610b5057600080fd5b506103a360048036036040811015610b6757600080fd5b506001600160a01b038135169060200135612457565b348015610b8957600080fd5b5061050760048036036020811015610ba057600080fd5b503561246b565b348015610bb357600080fd5b50610507612571565b348015610bc857600080fd5b50610507612577565b6102de60048036036040811015610be757600080fd5b506001600160a01b03813516906020013561257d565b348015610c0957600080fd5b5061077e612597565b348015610c1e57600080fd5b5061077e6125a6565b348015610c3357600080fd5b506105076125b5565b348015610c4857600080fd5b5061050760048036036040811015610c5f57600080fd5b506001600160a01b03813581169160200135166125bb565b348015610c8357600080fd5b5061077e6125e6565b348015610c9857600080fd5b506105076125f5565b60688054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d2d5780601f10610d0257610100808354040283529160200191610d2d565b820191906000526020600020905b815481529060010190602001808311610d1057829003601f168201915b505050505090505b90565b6000610d4c610d456126a9565b84846126ad565b5060015b92915050565b600054610100900460ff1680610d6f5750610d6f612799565b80610d7d575060005460ff16155b610db85760405162461bcd60e51b815260040180806020018281038252602e815260200180613da1602e913960400191505060405180910390fd5b600054610100900460ff16158015610de3576000805460ff1961ff0019909116610100171660011790555b8351610df6906068906020870190613b86565b508251610e0a906069906020860190613b86565b50606a805460ff191660ff84161790558015610e2c576000805461ff00191690555b50505050565b60355490565b60a2546001600160a01b031615610e8c576040805162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b604482015290519081900360640190fd5b610e9882826012610d56565b85610ed25760ad5460408051918252600160208301528051600080516020613d388339815191529281900390910190a1600160ad55610f2d565b6f4b3b4ca85a86c47a098a2240000000008610610f27576040805162461bcd60e51b815260206004820152600e60248201526d115610d154d4d2559157d1d3d05360921b604482015290519081900360640190fd5b60a68690555b60008511610f76576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f534c4f50455f4e554d60781b604482015290519081900360640190fd5b60008411610fbf576040805162461bcd60e51b815260206004820152601160248201527024a72b20a624a22fa9a627a822afa222a760791b604482015290519081900360640190fd5b6001600160801b038510611010576040805162461bcd60e51b81526020600482015260136024820152724558434553534956455f534c4f50455f4e554d60681b604482015290519081900360640190fd5b6001600160801b038410611061576040805162461bcd60e51b815260206004820152601360248201527222ac21a2a9a9a4ab22afa9a627a822afa222a760691b604482015290519081900360640190fd5b60a085905560a18490556127108311156110b4576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f5245534552564560881b604482015290519081900360640190fd5b60a983905568056bc75e2d6310000060ab55609f8054610100600160a81b0319163361010081029190911790915560a280546001600160a01b0319908116831790915560a48054821690921790915560a380549091166001600160a01b038916179055871561113d5760a8889055609f5461113d9061010090046001600160a01b03168961279f565b604051806052613ce682396052019050604051809103902061115d610ca1565b80516020918201206040805180820190915260018152601960f91b9201919091527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a56111a76128ba565b6040805160208082019690965280820194909452606084019290925260808301523060a0808401919091528151808403909101815260c09092019052805191012060af555050505050505050565b60006112028484846128be565b6112788461120e6126a9565b61127385604051806060016040528060288152602001613d79602891396001600160a01b038a1660009081526034602052604081209061124c6126a9565b6001600160a01b03168152602081019190915260400160002054919063ffffffff6129dd16565b6126ad565b5060015b9392505050565b60a65481565b600060ab5482101561129d57506000611401565b60008060ad54141561138a578260006112b4610e32565b905060006112d660a05460a654028360a85460a654010360a154600202612a74565b9050808311156112e4578092505b6112fa8360a15460020260a05460a65402612a74565b93508583146113825760a154818703935060020261131e818563ffffffff612bfd16565b60a65460a0549195508002915061133c90829063ffffffff612bfd16565b905061134e848263ffffffff612c5616565b905060a054818161135b57fe5b04905061136781612cb0565b60a6549003905061137e858263ffffffff612c5616565b9450505b5050506113fe565b600160ad5414156113f457600060a854609e546113a5610e32565b010390506113bb8460a15460020260a054612a74565b91506113cf8282800263ffffffff612c5616565b91506113da82612cb0565b91506113ec828263ffffffff612d1f16565b9150506113fe565b6000915050611401565b90505b919050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb81565b606a5460ff1690565b60a05481565b60af5481565b609f5461010090046001600160a01b031681565b6000610d4c6114606126a9565b8461127385603460006114716126a9565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff612c5616565b6114b333826000612d61565b50565b60a2546001600160a01b03163314611504576040805162461bcd60e51b815260206004820152600c60248201526b434f4e54524f4c5f4f4e4c5960a01b604482015290519081900360640190fd5b609d80546001600160a01b0319166001600160a01b038b8116919091179091558716611569576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b60a280546001600160a01b0319166001600160a01b038981169190911790915586166115ce576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b60a480546001600160a01b0319166001600160a01b038816179055609f805460ff1916851515179055612710831115611643576040805162461bcd60e51b81526020600482015260126024820152711253959053125117d0d3d35352551351539560721b604482015290519081900360640190fd5b60ac5483101561169a576040805162461bcd60e51b815260206004820152601d60248201527f434f4d4d49544d454e545f4d41595f4e4f545f42455f52454455434544000000604482015290519081900360640190fd5b60ac8390556127108511156116e4576040805162461bcd60e51b815260206004820152600b60248201526a494e56414c49445f46454560a81b604482015290519081900360640190fd5b60a585905581611734576040805162461bcd60e51b81526020600482015260166024820152751253959053125117d3525397d253959154d51351539560521b604482015290519081900360640190fd5b60ab82905560aa54811015611790576040805162461bcd60e51b815260206004820152601d60248201527f4f50454e5f554e54494c5f4d41595f4e4f545f42455f52454455434544000000604482015290519081900360640190fd5b60aa819055609f546001600160a01b0389811661010090920416146118ca576001600160a01b0388166117fc576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b609f546000906118199061010090046001600160a01b0316611d53565b609f546001600160a01b036101009091048116600090815260a7602052604080822054928d168252902054919250611857919063ffffffff612c5616565b6001600160a01b03808b16600090815260a7602052604080822093909355609f54610100900490911681529081205580156118a857609f546118a89061010090046001600160a01b03168a836128be565b50609f8054610100600160a81b0319166101006001600160a01b038b16021790555b604080516001600160a01b038b811682528615156020830152818301869052606082018890526080820185905260a082018490529151828916928a811692908c16917f64c539ad5ca31b3ba33150837a33d9e038c90023b19e46e187dcf033bbdae5b39181900360c00190a4505050505050505050565b609f5461010090046001600160a01b03163314611998576040805162461bcd60e51b815260206004820152601060248201526f42454e45464943494152595f4f4e4c5960801b604482015290519081900360640190fd5b60ad546000906119d75760ad5460408051918252600360208301528051600080516020613d388339815191529281900390910190a1600360ad55611aae565b600160ad541415611a71574260aa541115611a25576040805162461bcd60e51b8152602060048201526009602482015268544f4f5f4541524c5960b81b604482015290519081900360640190fd5b611a2e34611d92565b60ad5460408051918252600260208301528051929350600080516020613d3883398151915292918290030190a1600260ad55611a6c81346001612ea1565b611aae565b6040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f535441544560981b604482015290519081900360640190fd5b6040805182815290517fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf9181900360200190a150565b600080609e54611af2610e32565b0190506000611b21611b1260ac5460020286612bfd90919063ffffffff16565b60a15460a05461271002612a74565b9050611b358183800263ffffffff612c5616565b9050611b4081612cb0565b905081811115611b525781900361127c565b5060009392505050565b604051806040016040528060018152602001601960f91b81525081565b609e5481565b60a15481565b60ac5481565b609f5461010090046001600160a01b031633141580611bad5750600260ad5410155b611be85760405162461bcd60e51b8152600401808060200182810382526028815260200180613dcf6028913960400191505060405180910390fd5b60008111611c34576040805162461bcd60e51b81526020600482015260146024820152734d5553545f53454c4c5f41545f4c454153545f3160601b604482015290519081900360640190fd5b6000611c3f8361246b565b905081811015611c87576040805162461bcd60e51b815260206004820152600e60248201526d50524943455f534c49505041474560901b604482015290519081900360640190fd5b60ad541580611c985750600360ad54145b15611cce5733600090815260a76020526040902054611cbd908463ffffffff612d1f16565b33600090815260a760205260409020555b611cda33846001612d61565b6000609e54611ce7610e32565b01905060a854811015611cfa5760a88190555b611d048583612f98565b604080518381526020810186905281516001600160a01b0388169233927fa082022e93cfcd9f1da5f9236718053910f7e840da080c789c7845698dc032ff929081900390910190a35050505050565b6001600160a01b031660009081526033602052604090205490565b60a76020526000908152604090205481565b60ae6020526000908152604090205481565b600080600160ad5414156113fe576000611daa6125f5565b9050611dbc818563ffffffff612d1f16565b90506000611dc8610e32565b9050611ddd8160a054609e540260a154612a74565b9250611df0818260a0540260a154612a74565b83019250818311611e045760009250611e0a565b81830392505b50509050919050565b60ab5481565b60af54604080517fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb6020808301919091526001600160a01b03808d16838501819052908c166060840152608083018b905260a083018a905288151560c0808501919091528451808503909101815260e08401855280519083012061190160f01b61010085015261010284019590955261012280840195909552835180840390950185526101429092019092528251929091019190912090611f19576040805162461bcd60e51b815260206004820152601560248201527404441542f696e76616c69642d616464726573732d3605c1b604482015290519081900360640190fd5b6040805160008152602080820180845284905260ff8716828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015611f70573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b031614611fd4576040805162461bcd60e51b81526020600482015260126024820152711110550bda5b9d985b1a590b5c195c9b5a5d60721b604482015290519081900360640190fd5b851580611fe15750854211155b612027576040805162461bcd60e51b81526020600482015260126024820152711110550bdc195c9b5a5d0b595e1c1a5c995960721b604482015290519081900360640190fd5b6001600160a01b038916600090815260ae60205260409020805460018101909155871461208f576040805162461bcd60e51b81526020600482015260116024820152704441542f696e76616c69642d6e6f6e636560781b604482015290519081900360640190fd5b60008561209d5760006120a1565b6000195b90506120ae8a8a836126ad565b50505050505050505050565b609d546001600160a01b031681565b60698054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d2d5780601f10610d0257610100808354040283529160200191610d2d565b60a95481565b6000610d4c61213d6126a9565b8461127385604051806060016040528060258152602001613e8b60259139603460006121676126a9565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff6129dd16565b6001600160a01b0383166121eb576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b60008111612236576040805162461bcd60e51b81526020600482015260136024820152724d5553545f4255595f41545f4c454153545f3160681b604482015290519081900360640190fd5b600061224183611289565b905081811015612289576040805162461bcd60e51b815260206004820152600e60248201526d50524943455f534c49505041474560901b604482015290519081900360640190fd5b604080518481526020810183905281516001600160a01b0387169233927f89f5adc174562e07c9c9b1cae7109bbecb21cf9d1b2847e550042b8653c54a0e929081900390910190a36122dd83346000612ea1565b60ad546123ac576001600160a01b038416600090815260a76020526040902080548201905560a65460a85482612311610e32565b0103106123a75760ad5460408051918252600160208301528051600080516020613d388339815191529281900390910190a1600160ad55609f5461010090046001600160a01b0316600090815260a7602052604081205460a65460a05460a15461238393929190910290600202612a74565b90506123a56123a0826123946125f5565b9063ffffffff612d1f16565b612fda565b505b6123cf565b609f546001600160a01b0385811661010090920416146123cf576123cf83612fda565b6123d9848261279f565b600160ad541480156123fa5750609f5461010090046001600160a01b031633145b80156124185750609f546001600160a01b0385811661010090920416145b80156124265750609f5460ff165b15610e2c57609f54610e2c9061010090046001600160a01b0316826000612d61565b609f5460ff1681565b60a85481565b6000610d4c6124646126a9565b84846128be565b6000806124766125f5565b90506000600160ad54141561250d576000609e54612492610e32565b0190506124bd6124a8868563ffffffff612bfd16565b609e5480026124b5610e32565b848502613055565b915060006124d4866002860263ffffffff612bfd16565b90508181816124df57fe5b049283019290506125026124f9878063ffffffff612bfd16565b85848502613201565b83039250505061127c565b600260ad54141561254257612528848363ffffffff612bfd16565b9050612532610e32565b818161253a57fe5b04905061127c565b612552848363ffffffff612bfd16565b905060a85461255f610e32565b03818161256857fe5b04949350505050565b60a55481565b60ad5481565b61258981346000612ea1565b612593828261324c565b5050565b60a4546001600160a01b031681565b60a2546001600160a01b031681565b60aa5481565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60a3546001600160a01b031681565b60a35460009047906001600160a01b0316156126855760a354604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561265657600080fd5b505afa15801561266a573d6000803e3d6000fd5b505050506040513d602081101561268057600080fd5b505190505b6001600160801b038111156126a4576001600160801b03915050610d35565b905090565b3390565b6001600160a01b0383166126f25760405162461bcd60e51b8152600401808060200182810382526024815260200180613e3d6024913960400191505060405180910390fd5b6001600160a01b0382166127375760405162461bcd60e51b8152600401808060200182810382526022815260200180613c646022913960400191505060405180910390fd5b6001600160a01b03808416600081815260346020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b303b1590565b609d546000908390839083906001600160a01b03161561283757609d54604080516336dffedf60e01b81526001600160a01b0387811660048301528681166024830152604482018690528415156064830152915191909216916336dffedf91608480830192600092919082900301818387803b15801561281e57600080fd5b505af1158015612832573d6000803e3d6000fd5b505050505b6128418686613412565b6f4b3b4ca85a86c47a098a22400000000061286c609e54612860610e32565b9063ffffffff612c5616565b11156128b2576040805162461bcd60e51b815260206004820152601060248201526f4558434553534956455f535550504c5960801b604482015290519081900360640190fd5b505050505050565b4690565b609d548390839083906000906001600160a01b03161561295657609d54604080516336dffedf60e01b81526001600160a01b0387811660048301528681166024830152604482018690528415156064830152915191909216916336dffedf91608480830192600092919082900301818387803b15801561293d57600080fd5b505af1158015612951573d6000803e3d6000fd5b505050505b60ad541515806129785750609f546001600160a01b0388811661010090920416145b6129c9576040805162461bcd60e51b815260206004820152601c60248201527f4f4e4c595f42454e45464943494152595f445552494e475f494e495400000000604482015290519081900360640190fd5b6129d4878787613504565b50505050505050565b60008184841115612a6c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a31578181015183820152602001612a19565b50505050905090810190601f168015612a5e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000831580612a81575082155b15612a8e5750600061127c565b6000838560001981612a9c57fe5b0410612ab95750838302828181612aaf57fe5b04915061127c9050565b838581811115612ac95750859050845b848281612ad257fe5b0492506305f5e100831115612afc57612af1838263ffffffff612bfd16565b935061127c92505050565b60001981016001600160801b038104600101905060001983016001600160801b0381046001019050808260001981612b3057fe5b0410612ba05790810290818481612b4357fe5b049450630bebc200851115612ba057612b62858463ffffffff612bfd16565b9450506000198601818181612b7357fe5b049050612b8781600163ffffffff612c5616565b9050808581612b9257fe5b04955061127c945050505050565b60016001600160801b03600019850104019150818381612bbc57fe5b049450506000198601818181612bce57fe5b046001019050808481612bdd57fe5b049050612bf0858263ffffffff612bfd16565b9998505050505050505050565b600082612c0c57506000610d50565b82820282848281612c1957fe5b041461127c5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d586021913960400191505060405180910390fd5b60008282018381101561127c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081612cbf57506000611401565b60038211612ccf57506001611401565b600019821415612ce757506001600160801b03611401565b5080600260018201045b81811015612d1957809150600281828581612d0857fe5b040181612d1157fe5b049050612cf1565b50919050565b600061127c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506129dd565b609d548390600090849084906001600160a01b031615612df957609d54604080516336dffedf60e01b81526001600160a01b0387811660048301528681166024830152604482018690528415156064830152915191909216916336dffedf91608480830192600092919082900301818387803b158015612de057600080fd5b505af1158015612df4573d6000803e3d6000fd5b505050505b612e038787613662565b846129d457600160ad5414612e51576040805162461bcd60e51b815260206004820152600f60248201526e27a7262cafa22aa924a723afa92aa760891b604482015290519081900360640190fd5b609e8054870190556040805187815290516001600160a01b038916917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250505050505050565b60a3546001600160a01b0316612f30578015612ee1576000612ec9838563ffffffff612d1f16565b90508015612edb57612edb338261375e565b50612f2b565b818314612f2b576040805162461bcd60e51b8152602060048201526013602482015272494e434f52524543545f4d53475f56414c554560681b604482015290519081900360640190fd5b612f93565b8115612f75576040805162461bcd60e51b815260206004820152600f60248201526e0889ebe9c9ea8bea68a9c88be8aa89608b1b604482015290519081900360640190fd5b60a354612f93906001600160a01b031633308663ffffffff61384316565b505050565b80156125935760a3546001600160a01b0316612fbd57612fb8828261375e565b612593565b60a354612593906001600160a01b0316838363ffffffff61389d16565b60a954600090612ff0908363ffffffff612bfd16565b612710900490506130018282612d1f565b9050600061301a60a55483612bfd90919063ffffffff16565b609f54612710909104915061303f9061010090046001600160a01b0316828403612f98565b60a454612f93906001600160a01b031682612f98565b600081836000198161306357fe5b041061307d576130768585848602612a74565b90506131f9565b841580613088575083155b15613095575060006131f9565b8183818111156130a55750839050825b60008688600019816130b357fe5b04106130de57508686028181816130c657fe5b0490508281816130d257fe5b0493506131f992505050565b8688818111156130ee5750889050875b60008483816130f957fe5b049050630bebc20081111561312057613113818388612a74565b96505050505050506131f9565b506001600160801b03600019838101829004600190810192848301040190829082908161314957fe5b04106131c457810280848161315a57fe5b049450630bebc2008511156131c457613179858463ffffffff612bfd16565b945085858161318457fe5b0494506000851180156131a2575080856000198161319e57fe5b0410155b156131c457938402938685816131b457fe5b0497506131f99650505050505050565b5050600160801b85046001600160801b03850481026131ef8185816131e557fe5b0484600019612a74565b9750505050505050505b949350505050565b60008061320f858585612a74565b90508061322057600191505061127c565b60016305f5e100600019830104018119811115613243576000199250505061127c565b01949350505050565b60008111613294576040805162461bcd60e51b815260206004820152601060248201526f4d495353494e475f43555252454e435960801b604482015290519081900360640190fd5b600160ad54146132db576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f535441544560981b604482015290519081900360640190fd5b60006132f260a95483612bfd90919063ffffffff16565b61271090049050600061330483611ae4565b9050836001600160a01b03811661332c5750609f5461010090046001600160a01b0316613350565b613338600086846138ef565b156133505750609f5461010090046001600160a01b03165b609f5461336d9061010090046001600160a01b0316848603612f98565b81156133c35761337d818361279f565b609f546001600160a01b03828116610100909204161480156133a15750609f5460ff165b156133c357609f546133c39061010090046001600160a01b0316836000612d61565b604080518581526020810184905281516001600160a01b0388169233927f0849372be021f4dce74a8a4cc15fcfaa23fdcfa92ae99fa045f6cdf0c0836436929081900390910190a35050505050565b6001600160a01b03821661346d576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b603554613480908263ffffffff612c5616565b6035556001600160a01b0382166000908152603360205260409020546134ac908263ffffffff612c5616565b6001600160a01b03831660008181526033602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0383166135495760405162461bcd60e51b8152600401808060200182810382526025815260200180613e186025913960400191505060405180910390fd5b6001600160a01b03821661358e5760405162461bcd60e51b8152600401808060200182810382526023815260200180613c1f6023913960400191505060405180910390fd5b6135d181604051806060016040528060268152602001613c86602691396001600160a01b038616600090815260336020526040902054919063ffffffff6129dd16565b6001600160a01b038085166000908152603360205260408082209390935590841681522054613606908263ffffffff612c5616565b6001600160a01b0380841660008181526033602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6001600160a01b0382166136a75760405162461bcd60e51b8152600401808060200182810382526021815260200180613df76021913960400191505060405180910390fd5b6136ea81604051806060016040528060228152602001613c42602291396001600160a01b038516600090815260336020526040902054919063ffffffff6129dd16565b6001600160a01b038316600090815260336020526040902055603554613716908263ffffffff612d1f16565b6035556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b804710156137b3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146137fe576040519150601f19603f3d011682016040523d82523d6000602084013e613803565b606091505b5050905080612f935760405162461bcd60e51b815260040180806020018281038252603a815260200180613cac603a913960400191505060405180910390fd5b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610e2c908590613995565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612f93908490613995565b609d546000906001600160a01b031615611b5257609d546040805163d4ce141560e01b81526001600160a01b0387811660048301528681166024830152604482018690529151919092169163d4ce1415916064808301926020929190829003018186803b15801561395f57600080fd5b505afa158015613973573d6000803e3d6000fd5b505050506040513d602081101561398957600080fd5b505160ff16905061127c565b6139a7826001600160a01b0316613b4d565b6139f8576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310613a365780518252601f199092019160209182019101613a17565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613a98576040519150601f19603f3d011682016040523d82523d6000602084013e613a9d565b606091505b509150915081613af4576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610e2c57808060200190516020811015613b1057600080fd5b5051610e2c5760405162461bcd60e51b815260040180806020018281038252602a815260200180613e61602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906131f9575050151592915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613bc757805160ff1916838001178555613bf4565b82800160010185558215613bf4579182015b82811115613bf4578251825591602001919060010190613bd9565b50613c00929150613c04565b5090565b610d3591905b80821115613c005760008155600101613c0a56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429107dddb4541735557564238389eccfc9979bfdde5e57e24e9777b6fe79b4d22f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656442454e45464943494152595f4f4e4c595f53454c4c5f494e5f434c4f53455f4f525f43414e43454c45524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a723158202748646c8b8b5646abe1fa9c4e45677da2ddf5136b826de895b13f3238da581264736f6c63430005110032",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c806370a082311161015a578063a71ddd25116100c1578063c415b95c1161007a578063c415b95c14610bfd578063d8de658714610c12578063dcf81d1714610c27578063dd62ed3e14610c3c578063e5a6b10f14610c77578063ff90956014610c8c57610288565b8063a71ddd2514610b2f578063a9059cbb14610b44578063b12f415314610b7d578063b8606eef14610ba7578063c19d93fb14610bbc578063c407687614610bd157610288565b806393e59dc11161011357806393e59dc114610a7057806395d89b4114610a855780639df3f4f614610a9a578063a457c2d714610aaf578063a59ac6dd14610ae8578063a63b91f414610b1a57610288565b806370a0823114610931578063736dcb1f146109645780637ecebe0014610997578063896d1708146109ca5780638ac2c680146109f45780638fcbaf0c14610a0957610288565b80633644e515116101fe5780634f3424df116101b75780634f3424df1461087457806354fd4d501461089e57806355d0a1d0146108b357806358439fa5146108c85780636177e37c146108dd5780636a272462146108f257610288565b80633644e5151461075457806338af3eed14610769578063395093511461079a57806342966c68146107d3578063438f45a3146107fd57806343d726d61461086c57610288565b806323b872dd1161025057806323b872dd1461067d57806326315438146106c05780632e872bb3146106d557806330adf81f146106ff578063313ce5671461071457806335e5cc311461073f57610288565b806306fdde03146102e0578063095ea7b31461036a5780631624f6c6146103b757806318160ddd146104f257806321dfb63314610519575b60a3546001600160a01b0316156102de576040805162461bcd60e51b815260206004820152601560248201527409e9c98b2be8c9ea4be86aaa4a48a9c86b2be8aa89605b1b604482015290519081900360640190fd5b005b3480156102ec57600080fd5b506102f5610ca1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032f578181015183820152602001610317565b50505050905090810190601f16801561035c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037657600080fd5b506103a36004803603604081101561038d57600080fd5b506001600160a01b038135169060200135610d38565b604080519115158252519081900360200190f35b3480156103c357600080fd5b506102de600480360360608110156103da57600080fd5b810190602081018135600160201b8111156103f457600080fd5b82018360208201111561040657600080fd5b803590602001918460018302840111600160201b8311171561042757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561047957600080fd5b82018360208201111561048b57600080fd5b803590602001918460018302840111600160201b831117156104ac57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff169150610d569050565b3480156104fe57600080fd5b50610507610e32565b60408051918252519081900360200190f35b34801561052557600080fd5b506102de600480360361010081101561053d57600080fd5b8135916001600160a01b036020820135169160408201359160608101359160808201359160a08101359181019060e0810160c0820135600160201b81111561058457600080fd5b82018360208201111561059657600080fd5b803590602001918460018302840111600160201b831117156105b757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561060957600080fd5b82018360208201111561061b57600080fd5b803590602001918460018302840111600160201b8311171561063c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e38945050505050565b34801561068957600080fd5b506103a3600480360360608110156106a057600080fd5b506001600160a01b038135811691602081013590911690604001356111f5565b3480156106cc57600080fd5b50610507611283565b3480156106e157600080fd5b50610507600480360360208110156106f857600080fd5b5035611289565b34801561070b57600080fd5b50610507611406565b34801561072057600080fd5b5061072961142a565b6040805160ff9092168252519081900360200190f35b34801561074b57600080fd5b50610507611433565b34801561076057600080fd5b50610507611439565b34801561077557600080fd5b5061077e61143f565b604080516001600160a01b039092168252519081900360200190f35b3480156107a657600080fd5b506103a3600480360360408110156107bd57600080fd5b506001600160a01b038135169060200135611453565b3480156107df57600080fd5b506102de600480360360208110156107f657600080fd5b50356114a7565b34801561080957600080fd5b506102de600480360361012081101561082157600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a081013515159060c08101359060e08101359061010001356114b6565b6102de611941565b34801561088057600080fd5b506105076004803603602081101561089757600080fd5b5035611ae4565b3480156108aa57600080fd5b506102f5611b5c565b3480156108bf57600080fd5b50610507611b79565b3480156108d457600080fd5b50610507611b7f565b3480156108e957600080fd5b50610507611b85565b3480156108fe57600080fd5b506102de6004803603606081101561091557600080fd5b506001600160a01b038135169060208101359060400135611b8b565b34801561093d57600080fd5b506105076004803603602081101561095457600080fd5b50356001600160a01b0316611d53565b34801561097057600080fd5b506105076004803603602081101561098757600080fd5b50356001600160a01b0316611d6e565b3480156109a357600080fd5b50610507600480360360208110156109ba57600080fd5b50356001600160a01b0316611d80565b3480156109d657600080fd5b50610507600480360360208110156109ed57600080fd5b5035611d92565b348015610a0057600080fd5b50610507611e13565b348015610a1557600080fd5b506102de6004803603610100811015610a2d57600080fd5b506001600160a01b038135811691602081013590911690604081013590606081013590608081013515159060ff60a0820135169060c08101359060e00135611e19565b348015610a7c57600080fd5b5061077e6120ba565b348015610a9157600080fd5b506102f56120c9565b348015610aa657600080fd5b5061050761212a565b348015610abb57600080fd5b506103a360048036036040811015610ad257600080fd5b506001600160a01b038135169060200135612130565b6102de60048036036060811015610afe57600080fd5b506001600160a01b03813516906020810135906040013561219e565b348015610b2657600080fd5b506103a3612448565b348015610b3b57600080fd5b50610507612451565b348015610b5057600080fd5b506103a360048036036040811015610b6757600080fd5b506001600160a01b038135169060200135612457565b348015610b8957600080fd5b5061050760048036036020811015610ba057600080fd5b503561246b565b348015610bb357600080fd5b50610507612571565b348015610bc857600080fd5b50610507612577565b6102de60048036036040811015610be757600080fd5b506001600160a01b03813516906020013561257d565b348015610c0957600080fd5b5061077e612597565b348015610c1e57600080fd5b5061077e6125a6565b348015610c3357600080fd5b506105076125b5565b348015610c4857600080fd5b5061050760048036036040811015610c5f57600080fd5b506001600160a01b03813581169160200135166125bb565b348015610c8357600080fd5b5061077e6125e6565b348015610c9857600080fd5b506105076125f5565b60688054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d2d5780601f10610d0257610100808354040283529160200191610d2d565b820191906000526020600020905b815481529060010190602001808311610d1057829003601f168201915b505050505090505b90565b6000610d4c610d456126a9565b84846126ad565b5060015b92915050565b600054610100900460ff1680610d6f5750610d6f612799565b80610d7d575060005460ff16155b610db85760405162461bcd60e51b815260040180806020018281038252602e815260200180613da1602e913960400191505060405180910390fd5b600054610100900460ff16158015610de3576000805460ff1961ff0019909116610100171660011790555b8351610df6906068906020870190613b86565b508251610e0a906069906020860190613b86565b50606a805460ff191660ff84161790558015610e2c576000805461ff00191690555b50505050565b60355490565b60a2546001600160a01b031615610e8c576040805162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b604482015290519081900360640190fd5b610e9882826012610d56565b85610ed25760ad5460408051918252600160208301528051600080516020613d388339815191529281900390910190a1600160ad55610f2d565b6f4b3b4ca85a86c47a098a2240000000008610610f27576040805162461bcd60e51b815260206004820152600e60248201526d115610d154d4d2559157d1d3d05360921b604482015290519081900360640190fd5b60a68690555b60008511610f76576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f534c4f50455f4e554d60781b604482015290519081900360640190fd5b60008411610fbf576040805162461bcd60e51b815260206004820152601160248201527024a72b20a624a22fa9a627a822afa222a760791b604482015290519081900360640190fd5b6001600160801b038510611010576040805162461bcd60e51b81526020600482015260136024820152724558434553534956455f534c4f50455f4e554d60681b604482015290519081900360640190fd5b6001600160801b038410611061576040805162461bcd60e51b815260206004820152601360248201527222ac21a2a9a9a4ab22afa9a627a822afa222a760691b604482015290519081900360640190fd5b60a085905560a18490556127108311156110b4576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f5245534552564560881b604482015290519081900360640190fd5b60a983905568056bc75e2d6310000060ab55609f8054610100600160a81b0319163361010081029190911790915560a280546001600160a01b0319908116831790915560a48054821690921790915560a380549091166001600160a01b038916179055871561113d5760a8889055609f5461113d9061010090046001600160a01b03168961279f565b604051806052613ce682396052019050604051809103902061115d610ca1565b80516020918201206040805180820190915260018152601960f91b9201919091527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a56111a76128ba565b6040805160208082019690965280820194909452606084019290925260808301523060a0808401919091528151808403909101815260c09092019052805191012060af555050505050505050565b60006112028484846128be565b6112788461120e6126a9565b61127385604051806060016040528060288152602001613d79602891396001600160a01b038a1660009081526034602052604081209061124c6126a9565b6001600160a01b03168152602081019190915260400160002054919063ffffffff6129dd16565b6126ad565b5060015b9392505050565b60a65481565b600060ab5482101561129d57506000611401565b60008060ad54141561138a578260006112b4610e32565b905060006112d660a05460a654028360a85460a654010360a154600202612a74565b9050808311156112e4578092505b6112fa8360a15460020260a05460a65402612a74565b93508583146113825760a154818703935060020261131e818563ffffffff612bfd16565b60a65460a0549195508002915061133c90829063ffffffff612bfd16565b905061134e848263ffffffff612c5616565b905060a054818161135b57fe5b04905061136781612cb0565b60a6549003905061137e858263ffffffff612c5616565b9450505b5050506113fe565b600160ad5414156113f457600060a854609e546113a5610e32565b010390506113bb8460a15460020260a054612a74565b91506113cf8282800263ffffffff612c5616565b91506113da82612cb0565b91506113ec828263ffffffff612d1f16565b9150506113fe565b6000915050611401565b90505b919050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb81565b606a5460ff1690565b60a05481565b60af5481565b609f5461010090046001600160a01b031681565b6000610d4c6114606126a9565b8461127385603460006114716126a9565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff612c5616565b6114b333826000612d61565b50565b60a2546001600160a01b03163314611504576040805162461bcd60e51b815260206004820152600c60248201526b434f4e54524f4c5f4f4e4c5960a01b604482015290519081900360640190fd5b609d80546001600160a01b0319166001600160a01b038b8116919091179091558716611569576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b60a280546001600160a01b0319166001600160a01b038981169190911790915586166115ce576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b60a480546001600160a01b0319166001600160a01b038816179055609f805460ff1916851515179055612710831115611643576040805162461bcd60e51b81526020600482015260126024820152711253959053125117d0d3d35352551351539560721b604482015290519081900360640190fd5b60ac5483101561169a576040805162461bcd60e51b815260206004820152601d60248201527f434f4d4d49544d454e545f4d41595f4e4f545f42455f52454455434544000000604482015290519081900360640190fd5b60ac8390556127108511156116e4576040805162461bcd60e51b815260206004820152600b60248201526a494e56414c49445f46454560a81b604482015290519081900360640190fd5b60a585905581611734576040805162461bcd60e51b81526020600482015260166024820152751253959053125117d3525397d253959154d51351539560521b604482015290519081900360640190fd5b60ab82905560aa54811015611790576040805162461bcd60e51b815260206004820152601d60248201527f4f50454e5f554e54494c5f4d41595f4e4f545f42455f52454455434544000000604482015290519081900360640190fd5b60aa819055609f546001600160a01b0389811661010090920416146118ca576001600160a01b0388166117fc576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b609f546000906118199061010090046001600160a01b0316611d53565b609f546001600160a01b036101009091048116600090815260a7602052604080822054928d168252902054919250611857919063ffffffff612c5616565b6001600160a01b03808b16600090815260a7602052604080822093909355609f54610100900490911681529081205580156118a857609f546118a89061010090046001600160a01b03168a836128be565b50609f8054610100600160a81b0319166101006001600160a01b038b16021790555b604080516001600160a01b038b811682528615156020830152818301869052606082018890526080820185905260a082018490529151828916928a811692908c16917f64c539ad5ca31b3ba33150837a33d9e038c90023b19e46e187dcf033bbdae5b39181900360c00190a4505050505050505050565b609f5461010090046001600160a01b03163314611998576040805162461bcd60e51b815260206004820152601060248201526f42454e45464943494152595f4f4e4c5960801b604482015290519081900360640190fd5b60ad546000906119d75760ad5460408051918252600360208301528051600080516020613d388339815191529281900390910190a1600360ad55611aae565b600160ad541415611a71574260aa541115611a25576040805162461bcd60e51b8152602060048201526009602482015268544f4f5f4541524c5960b81b604482015290519081900360640190fd5b611a2e34611d92565b60ad5460408051918252600260208301528051929350600080516020613d3883398151915292918290030190a1600260ad55611a6c81346001612ea1565b611aae565b6040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f535441544560981b604482015290519081900360640190fd5b6040805182815290517fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf9181900360200190a150565b600080609e54611af2610e32565b0190506000611b21611b1260ac5460020286612bfd90919063ffffffff16565b60a15460a05461271002612a74565b9050611b358183800263ffffffff612c5616565b9050611b4081612cb0565b905081811115611b525781900361127c565b5060009392505050565b604051806040016040528060018152602001601960f91b81525081565b609e5481565b60a15481565b60ac5481565b609f5461010090046001600160a01b031633141580611bad5750600260ad5410155b611be85760405162461bcd60e51b8152600401808060200182810382526028815260200180613dcf6028913960400191505060405180910390fd5b60008111611c34576040805162461bcd60e51b81526020600482015260146024820152734d5553545f53454c4c5f41545f4c454153545f3160601b604482015290519081900360640190fd5b6000611c3f8361246b565b905081811015611c87576040805162461bcd60e51b815260206004820152600e60248201526d50524943455f534c49505041474560901b604482015290519081900360640190fd5b60ad541580611c985750600360ad54145b15611cce5733600090815260a76020526040902054611cbd908463ffffffff612d1f16565b33600090815260a760205260409020555b611cda33846001612d61565b6000609e54611ce7610e32565b01905060a854811015611cfa5760a88190555b611d048583612f98565b604080518381526020810186905281516001600160a01b0388169233927fa082022e93cfcd9f1da5f9236718053910f7e840da080c789c7845698dc032ff929081900390910190a35050505050565b6001600160a01b031660009081526033602052604090205490565b60a76020526000908152604090205481565b60ae6020526000908152604090205481565b600080600160ad5414156113fe576000611daa6125f5565b9050611dbc818563ffffffff612d1f16565b90506000611dc8610e32565b9050611ddd8160a054609e540260a154612a74565b9250611df0818260a0540260a154612a74565b83019250818311611e045760009250611e0a565b81830392505b50509050919050565b60ab5481565b60af54604080517fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb6020808301919091526001600160a01b03808d16838501819052908c166060840152608083018b905260a083018a905288151560c0808501919091528451808503909101815260e08401855280519083012061190160f01b61010085015261010284019590955261012280840195909552835180840390950185526101429092019092528251929091019190912090611f19576040805162461bcd60e51b815260206004820152601560248201527404441542f696e76616c69642d616464726573732d3605c1b604482015290519081900360640190fd5b6040805160008152602080820180845284905260ff8716828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015611f70573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b031614611fd4576040805162461bcd60e51b81526020600482015260126024820152711110550bda5b9d985b1a590b5c195c9b5a5d60721b604482015290519081900360640190fd5b851580611fe15750854211155b612027576040805162461bcd60e51b81526020600482015260126024820152711110550bdc195c9b5a5d0b595e1c1a5c995960721b604482015290519081900360640190fd5b6001600160a01b038916600090815260ae60205260409020805460018101909155871461208f576040805162461bcd60e51b81526020600482015260116024820152704441542f696e76616c69642d6e6f6e636560781b604482015290519081900360640190fd5b60008561209d5760006120a1565b6000195b90506120ae8a8a836126ad565b50505050505050505050565b609d546001600160a01b031681565b60698054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d2d5780601f10610d0257610100808354040283529160200191610d2d565b60a95481565b6000610d4c61213d6126a9565b8461127385604051806060016040528060258152602001613e8b60259139603460006121676126a9565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff6129dd16565b6001600160a01b0383166121eb576040805162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f4144445245535360881b604482015290519081900360640190fd5b60008111612236576040805162461bcd60e51b81526020600482015260136024820152724d5553545f4255595f41545f4c454153545f3160681b604482015290519081900360640190fd5b600061224183611289565b905081811015612289576040805162461bcd60e51b815260206004820152600e60248201526d50524943455f534c49505041474560901b604482015290519081900360640190fd5b604080518481526020810183905281516001600160a01b0387169233927f89f5adc174562e07c9c9b1cae7109bbecb21cf9d1b2847e550042b8653c54a0e929081900390910190a36122dd83346000612ea1565b60ad546123ac576001600160a01b038416600090815260a76020526040902080548201905560a65460a85482612311610e32565b0103106123a75760ad5460408051918252600160208301528051600080516020613d388339815191529281900390910190a1600160ad55609f5461010090046001600160a01b0316600090815260a7602052604081205460a65460a05460a15461238393929190910290600202612a74565b90506123a56123a0826123946125f5565b9063ffffffff612d1f16565b612fda565b505b6123cf565b609f546001600160a01b0385811661010090920416146123cf576123cf83612fda565b6123d9848261279f565b600160ad541480156123fa5750609f5461010090046001600160a01b031633145b80156124185750609f546001600160a01b0385811661010090920416145b80156124265750609f5460ff165b15610e2c57609f54610e2c9061010090046001600160a01b0316826000612d61565b609f5460ff1681565b60a85481565b6000610d4c6124646126a9565b84846128be565b6000806124766125f5565b90506000600160ad54141561250d576000609e54612492610e32565b0190506124bd6124a8868563ffffffff612bfd16565b609e5480026124b5610e32565b848502613055565b915060006124d4866002860263ffffffff612bfd16565b90508181816124df57fe5b049283019290506125026124f9878063ffffffff612bfd16565b85848502613201565b83039250505061127c565b600260ad54141561254257612528848363ffffffff612bfd16565b9050612532610e32565b818161253a57fe5b04905061127c565b612552848363ffffffff612bfd16565b905060a85461255f610e32565b03818161256857fe5b04949350505050565b60a55481565b60ad5481565b61258981346000612ea1565b612593828261324c565b5050565b60a4546001600160a01b031681565b60a2546001600160a01b031681565b60aa5481565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60a3546001600160a01b031681565b60a35460009047906001600160a01b0316156126855760a354604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561265657600080fd5b505afa15801561266a573d6000803e3d6000fd5b505050506040513d602081101561268057600080fd5b505190505b6001600160801b038111156126a4576001600160801b03915050610d35565b905090565b3390565b6001600160a01b0383166126f25760405162461bcd60e51b8152600401808060200182810382526024815260200180613e3d6024913960400191505060405180910390fd5b6001600160a01b0382166127375760405162461bcd60e51b8152600401808060200182810382526022815260200180613c646022913960400191505060405180910390fd5b6001600160a01b03808416600081815260346020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b303b1590565b609d546000908390839083906001600160a01b03161561283757609d54604080516336dffedf60e01b81526001600160a01b0387811660048301528681166024830152604482018690528415156064830152915191909216916336dffedf91608480830192600092919082900301818387803b15801561281e57600080fd5b505af1158015612832573d6000803e3d6000fd5b505050505b6128418686613412565b6f4b3b4ca85a86c47a098a22400000000061286c609e54612860610e32565b9063ffffffff612c5616565b11156128b2576040805162461bcd60e51b815260206004820152601060248201526f4558434553534956455f535550504c5960801b604482015290519081900360640190fd5b505050505050565b4690565b609d548390839083906000906001600160a01b03161561295657609d54604080516336dffedf60e01b81526001600160a01b0387811660048301528681166024830152604482018690528415156064830152915191909216916336dffedf91608480830192600092919082900301818387803b15801561293d57600080fd5b505af1158015612951573d6000803e3d6000fd5b505050505b60ad541515806129785750609f546001600160a01b0388811661010090920416145b6129c9576040805162461bcd60e51b815260206004820152601c60248201527f4f4e4c595f42454e45464943494152595f445552494e475f494e495400000000604482015290519081900360640190fd5b6129d4878787613504565b50505050505050565b60008184841115612a6c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a31578181015183820152602001612a19565b50505050905090810190601f168015612a5e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000831580612a81575082155b15612a8e5750600061127c565b6000838560001981612a9c57fe5b0410612ab95750838302828181612aaf57fe5b04915061127c9050565b838581811115612ac95750859050845b848281612ad257fe5b0492506305f5e100831115612afc57612af1838263ffffffff612bfd16565b935061127c92505050565b60001981016001600160801b038104600101905060001983016001600160801b0381046001019050808260001981612b3057fe5b0410612ba05790810290818481612b4357fe5b049450630bebc200851115612ba057612b62858463ffffffff612bfd16565b9450506000198601818181612b7357fe5b049050612b8781600163ffffffff612c5616565b9050808581612b9257fe5b04955061127c945050505050565b60016001600160801b03600019850104019150818381612bbc57fe5b049450506000198601818181612bce57fe5b046001019050808481612bdd57fe5b049050612bf0858263ffffffff612bfd16565b9998505050505050505050565b600082612c0c57506000610d50565b82820282848281612c1957fe5b041461127c5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d586021913960400191505060405180910390fd5b60008282018381101561127c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081612cbf57506000611401565b60038211612ccf57506001611401565b600019821415612ce757506001600160801b03611401565b5080600260018201045b81811015612d1957809150600281828581612d0857fe5b040181612d1157fe5b049050612cf1565b50919050565b600061127c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506129dd565b609d548390600090849084906001600160a01b031615612df957609d54604080516336dffedf60e01b81526001600160a01b0387811660048301528681166024830152604482018690528415156064830152915191909216916336dffedf91608480830192600092919082900301818387803b158015612de057600080fd5b505af1158015612df4573d6000803e3d6000fd5b505050505b612e038787613662565b846129d457600160ad5414612e51576040805162461bcd60e51b815260206004820152600f60248201526e27a7262cafa22aa924a723afa92aa760891b604482015290519081900360640190fd5b609e8054870190556040805187815290516001600160a01b038916917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250505050505050565b60a3546001600160a01b0316612f30578015612ee1576000612ec9838563ffffffff612d1f16565b90508015612edb57612edb338261375e565b50612f2b565b818314612f2b576040805162461bcd60e51b8152602060048201526013602482015272494e434f52524543545f4d53475f56414c554560681b604482015290519081900360640190fd5b612f93565b8115612f75576040805162461bcd60e51b815260206004820152600f60248201526e0889ebe9c9ea8bea68a9c88be8aa89608b1b604482015290519081900360640190fd5b60a354612f93906001600160a01b031633308663ffffffff61384316565b505050565b80156125935760a3546001600160a01b0316612fbd57612fb8828261375e565b612593565b60a354612593906001600160a01b0316838363ffffffff61389d16565b60a954600090612ff0908363ffffffff612bfd16565b612710900490506130018282612d1f565b9050600061301a60a55483612bfd90919063ffffffff16565b609f54612710909104915061303f9061010090046001600160a01b0316828403612f98565b60a454612f93906001600160a01b031682612f98565b600081836000198161306357fe5b041061307d576130768585848602612a74565b90506131f9565b841580613088575083155b15613095575060006131f9565b8183818111156130a55750839050825b60008688600019816130b357fe5b04106130de57508686028181816130c657fe5b0490508281816130d257fe5b0493506131f992505050565b8688818111156130ee5750889050875b60008483816130f957fe5b049050630bebc20081111561312057613113818388612a74565b96505050505050506131f9565b506001600160801b03600019838101829004600190810192848301040190829082908161314957fe5b04106131c457810280848161315a57fe5b049450630bebc2008511156131c457613179858463ffffffff612bfd16565b945085858161318457fe5b0494506000851180156131a2575080856000198161319e57fe5b0410155b156131c457938402938685816131b457fe5b0497506131f99650505050505050565b5050600160801b85046001600160801b03850481026131ef8185816131e557fe5b0484600019612a74565b9750505050505050505b949350505050565b60008061320f858585612a74565b90508061322057600191505061127c565b60016305f5e100600019830104018119811115613243576000199250505061127c565b01949350505050565b60008111613294576040805162461bcd60e51b815260206004820152601060248201526f4d495353494e475f43555252454e435960801b604482015290519081900360640190fd5b600160ad54146132db576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f535441544560981b604482015290519081900360640190fd5b60006132f260a95483612bfd90919063ffffffff16565b61271090049050600061330483611ae4565b9050836001600160a01b03811661332c5750609f5461010090046001600160a01b0316613350565b613338600086846138ef565b156133505750609f5461010090046001600160a01b03165b609f5461336d9061010090046001600160a01b0316848603612f98565b81156133c35761337d818361279f565b609f546001600160a01b03828116610100909204161480156133a15750609f5460ff165b156133c357609f546133c39061010090046001600160a01b0316836000612d61565b604080518581526020810184905281516001600160a01b0388169233927f0849372be021f4dce74a8a4cc15fcfaa23fdcfa92ae99fa045f6cdf0c0836436929081900390910190a35050505050565b6001600160a01b03821661346d576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b603554613480908263ffffffff612c5616565b6035556001600160a01b0382166000908152603360205260409020546134ac908263ffffffff612c5616565b6001600160a01b03831660008181526033602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0383166135495760405162461bcd60e51b8152600401808060200182810382526025815260200180613e186025913960400191505060405180910390fd5b6001600160a01b03821661358e5760405162461bcd60e51b8152600401808060200182810382526023815260200180613c1f6023913960400191505060405180910390fd5b6135d181604051806060016040528060268152602001613c86602691396001600160a01b038616600090815260336020526040902054919063ffffffff6129dd16565b6001600160a01b038085166000908152603360205260408082209390935590841681522054613606908263ffffffff612c5616565b6001600160a01b0380841660008181526033602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6001600160a01b0382166136a75760405162461bcd60e51b8152600401808060200182810382526021815260200180613df76021913960400191505060405180910390fd5b6136ea81604051806060016040528060228152602001613c42602291396001600160a01b038516600090815260336020526040902054919063ffffffff6129dd16565b6001600160a01b038316600090815260336020526040902055603554613716908263ffffffff612d1f16565b6035556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b804710156137b3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146137fe576040519150601f19603f3d011682016040523d82523d6000602084013e613803565b606091505b5050905080612f935760405162461bcd60e51b815260040180806020018281038252603a815260200180613cac603a913960400191505060405180910390fd5b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610e2c908590613995565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612f93908490613995565b609d546000906001600160a01b031615611b5257609d546040805163d4ce141560e01b81526001600160a01b0387811660048301528681166024830152604482018690529151919092169163d4ce1415916064808301926020929190829003018186803b15801561395f57600080fd5b505afa158015613973573d6000803e3d6000fd5b505050506040513d602081101561398957600080fd5b505160ff16905061127c565b6139a7826001600160a01b0316613b4d565b6139f8576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310613a365780518252601f199092019160209182019101613a17565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613a98576040519150601f19603f3d011682016040523d82523d6000602084013e613a9d565b606091505b509150915081613af4576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610e2c57808060200190516020811015613b1057600080fd5b5051610e2c5760405162461bcd60e51b815260040180806020018281038252602a815260200180613e61602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906131f9575050151592915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613bc757805160ff1916838001178555613bf4565b82800160010185558215613bf4579182015b82811115613bf4578251825591602001919060010190613bd9565b50613c00929150613c04565b5090565b610d3591905b80821115613c005760008155600101613c0a56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429107dddb4541735557564238389eccfc9979bfdde5e57e24e9777b6fe79b4d22f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656442454e45464943494152595f4f4e4c595f53454c4c5f494e5f434c4f53455f4f525f43414e43454c45524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a723158202748646c8b8b5646abe1fa9c4e45677da2ddf5136b826de895b13f3238da581264736f6c63430005110032",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Note that this is not the same as a `sell` via the DAT."
      },
      "buy(address,uint256,uint256)": {
        "details": "_minTokensBought is necessary as the price will change if some elses transaction mines after yours was submitted.",
        "params": {
          "_currencyValue": "How much currency to spend in order to buy COT.",
          "_minTokensBought": "Buy at least this many COT tokens or the transaction reverts.",
          "_to": "The account to receive the COT tokens from this purchase."
        }
      },
      "close()": {
        "details": "Requires an `exitFee` to be paid.  If the currency is ETH, include a little more than what appears to be required and any remainder will be returned to your account.  This is because another user may have a transaction mined which changes the exitFee required. For other `currency` types, the beneficiary account will be billed the exact amount required."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "estimateBuyValue(uint256)": {
        "params": {
          "_currencyValue": "How much currency to spend in order to buy COT."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "initialize(string,string,uint8)": {
        "details": "Sets the values for `name`, `symbol`, and `decimals`. All three of these values are immutable: they can only be set once during construction."
      },
      "initialize(uint256,address,uint256,uint256,uint256,uint256,string,string)": {
        "details": "using the init pattern in order to support zos upgrades"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pay(address,uint256)": {
        "details": "Pay the organization on-chain.",
        "params": {
          "_currencyValue": "How much currency which was paid.",
          "_to": "The account which receives tokens for the contribution. If this address is not authorized to receive tokens then they will be sent to the beneficiary account instead."
        }
      },
      "sell(address,uint256,uint256)": {
        "details": "_minCurrencyReturned is necessary as the price will change if some elses transaction mines after yours was submitted.",
        "params": {
          "_minCurrencyReturned": "Get at least this many currency tokens or the transaction reverts.",
          "_quantityToSell": "How many COT tokens to sell for currency value.",
          "_to": "The account to receive the currency from this sale."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      }
    },
    "title": "Decentralized Autonomous Trust This contract is a modified version of the implementation provided by Fairmint for a Decentralized Autonomous Trust as described in the continuous organization whitepaper (https://github.com/c-org/whitepaper) and specified here: https://github.com/fairmint/c-org/wiki. Code from : https://github.com/Fairmint/c-org/blob/dfd3129f9bce8717406aba54d1f1888d8e253dbb/contracts/DecentralizedAutonomousTrust.sol Changes Added: https://github.com/Fairmint/c-org/commit/60bb63b9112a82996f275a75a87c28b1d73e3f11 * Use at your own risk. "
  },
  "userdoc": {
    "methods": {
      "burn(uint256)": {
        "notice": "Burn the amount of tokens from the address msg.sender if authorized."
      },
      "buy(address,uint256,uint256)": {
        "notice": "Purchase COT tokens with the given amount of currency."
      },
      "buybackReserve()": {
        "notice": "The total amount of currency value currently locked in the contract and available to sellers."
      },
      "close()": {
        "notice": "Called by the beneficiary account to STATE_CLOSE or STATE_CANCEL the c-org, preventing any more tokens from being minted."
      },
      "estimateBuyValue(uint256)": {
        "notice": "Calculate how many COT tokens you would buy with the given amount of currency if `buy` was called now."
      },
      "estimateExitFee(uint256)": {
        "notice": "Close"
      },
      "estimatePayValue(uint256)": {
        "notice": "Pay"
      },
      "estimateSellValue(uint256)": {
        "notice": "Sell"
      },
      "initialize(uint256,address,uint256,uint256,uint256,uint256,string,string)": {
        "notice": "Called once after deploy to set the initial configuration. None of the values provided here may change once initially set."
      },
      "sell(address,uint256,uint256)": {
        "notice": "Sell COT tokens for at least the given amount of currency."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1834,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1836,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1898,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 957,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 963,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 965,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 1349,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "______gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1360,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "_name",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 1362,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "_symbol",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 1364,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "_decimals",
        "offset": 0,
        "slot": "106",
        "type": "t_uint8"
      },
      {
        "astId": 1416,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "______gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2610,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "whitelist",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IWhitelist)4442"
      },
      {
        "astId": 2612,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "burnedSupply",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 2614,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "autoBurn",
        "offset": 0,
        "slot": "159",
        "type": "t_bool"
      },
      {
        "astId": 2616,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "beneficiary",
        "offset": 1,
        "slot": "159",
        "type": "t_address_payable"
      },
      {
        "astId": 2618,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "buySlopeNum",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 2620,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "buySlopeDen",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 2622,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "control",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 2624,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "currency",
        "offset": 0,
        "slot": "163",
        "type": "t_contract(IERC20)1535"
      },
      {
        "astId": 2626,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "feeCollector",
        "offset": 0,
        "slot": "164",
        "type": "t_address_payable"
      },
      {
        "astId": 2628,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "feeBasisPoints",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 2630,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "initGoal",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 2634,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "initInvestors",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2636,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "initReserve",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 2638,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "investmentReserveBasisPoints",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 2640,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "openUntilAtLeast",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 2642,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "minInvestment",
        "offset": 0,
        "slot": "171",
        "type": "t_uint256"
      },
      {
        "astId": 2644,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "revenueCommitmentBasisPoints",
        "offset": 0,
        "slot": "172",
        "type": "t_uint256"
      },
      {
        "astId": 2646,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "state",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 2653,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "nonces",
        "offset": 0,
        "slot": "174",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2655,
        "contract": "contracts/dxd/DecentralizedAutonomousTrust.sol:DecentralizedAutonomousTrust",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "175",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1535": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IWhitelist)4442": {
        "encoding": "inplace",
        "label": "contract IWhitelist",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}